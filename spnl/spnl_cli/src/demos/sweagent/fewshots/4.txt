Example 4 (do not solve this one):
--- BEGIN ISSUE ---
Make PersonName3 iterable
```python
from pydicom import Dataset

ds = Dataset()
ds.PatientName = 'SomeName'

'S' in ds.PatientName
```
```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: argument of type 'PersonName3' is not iterable
```

I'm not really sure if this is intentional or if PN elements should support `str` methods. And yes I know I can `str(ds.PatientName)` but it's a bit silly, especially when I keep having to write exceptions to my element iterators just for PN elements.
--- END ISSUE ---

Below are some code segments from a relevant file. One or more of these may contain bugs.
--- BEGIN FILE ---
### pydicom/valuerep.py
...
    def __init__(self, val):
        if isinstance(val, str):
            self.original_string = val
        elif isinstance(val, DA) and hasattr(val, 'original_string'):
            self.original_string = val.original_string

    def __str__(self):
        if hasattr(self, 'original_string'):
            return self.original_string
        else:
            return super(DA, self).__str__()

    def __repr__(self):
        return "\"" + str(self) + "\""
...
--- END FILE ---

Another developer has proposed the following edit: Add __iter__ method to DA class to make it iterable

--- BEGIN EDIT ---
Here is my thought process:
The issue text asks for making it iterable, and the Pythonic way to do that is to add an __iter__ method.
Here is my response:
```python
### pydicom/valuerep.py
<<<<<<< SEARCH
def __str__(self):
    return '='.join(self.components).__str__()
=======
def __str__(self):
    return '='.join(self.components).__str__()

def __next__(self):
    # Get next character or stop iteration
    if self._i < self._rep_len:
        c = self._str_rep[self._i]
        self._i += 1
        return c
    else:
        raise StopIteration

def __iter__(self):
    # Get string rep. and length, initialize index counter
    self._str_rep = self.__str__()
    self._rep_len = len(self._str_rep)
    self._i = 0
    return self

def __contains__(self, x):
    return x in self.__str__()
>>>>>>> REPLACE
```
--- END EDIT ---
