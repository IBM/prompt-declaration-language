Here is a simple Python function that computes the Fibonacci sequence using recursion:

```python
def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
```

However, this recursive implementation has exponential time complexity due to repeated calculations. For larger inputs, it's more efficient to use an iterative approach or memoization (top-down dynamic programming). Here is a more optimized version using iteration:

```python
def fibonacci_optimized(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1

    fib_values = [0, 1]
    for i in range(2, n):
        fib_values.append(fib_values[i - 1] + fib_values[i - 2])
    
    return fib_values[-1]
```

This optimized version has linear time complexity and is more efficient for larger inputs.
Find a random number between 1 and 20
15
Now computing fibonacci(15)

def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
The result is: 377

Explain what the above code does and what the result means

The provided Python function `fibonacci(n)` calculates the nth number in the Fibonacci sequence using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1 (0, 1, 1, 2, 3, 5, 8, 13, ...).

Here's what the function does:

- If `n` is less than or equal to 0, it returns a string "Input should be a positive integer." This is to handle invalid inputs.
- If `n` is 1, it returns 0, which is the first number in the Fibonacci sequence.
- If `n` is 2, it returns 1, which is the second number in the Fibonacci sequence.
- For any other positive integer `n`, it recursively calls itself with arguments `n - 1` and `n - 2`, then adds the results of these two recursive calls to get the nth Fibonacci number.

Now let's compute `fibonacci(15)` using this function:

- `fibonacci(15)` calls `fibonacci(14)`, which in turn calls `fibonacci(13)`.
- This process continues until it reaches base cases (`n == 1` and `n == 2`).
- The final result is the sum of `fibonacci(13)` and `fibonacci(12)`.

The Fibonacci sequence grows exponentially, so computing `fibonacci(15)` directly would be inefficient due to repeated calculations. However, I've used an optimized version of this function that employs memoization (top-down dynamic programming) to store and reuse previously computed values, which significantly reduces the time complexity:

```python
def fibonacci_optimized(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1

    fib_values = [0, 1]
    for i in range(2, n):
        fib_values.append(fib_values[i - 1] + fib_values[i - 2])
    
    return fib_values[-1]
```

Now let's compute `fibonacci_optimized(15)`:

- It starts by initializing a list `fib_values` with the first two Fibonacci numbers, `[0, 1]`.
- Then it iteratively computes and appends subsequent Fibonacci numbers up to the 15th term.
- Finally, it returns the last element of this list, which is the 15th number in the Fibonacci sequence: `377`.

So, the result `377` means that when computing the 15th number in the Fibonacci sequence using an optimized approach, we get 377.