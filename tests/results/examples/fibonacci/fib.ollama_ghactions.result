Here is a simple Python function that computes the Fibonacci sequence using recursion:

```python
def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
```

However, this recursive implementation has exponential time complexity due to repeated calculations. For larger inputs, it's more efficient to use an iterative approach or memoization (caching previous results). Here is a version using iteration:

```python
def fibonacci_iterative(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1

    fib_values = [0, 1]
    for i in range(2, n):
        fib_values.append(fib_values[i - 1] + fib_values[i - 2])
    return fib_values[-1]
```

This version has linear time complexity and is more efficient for larger inputs.
Find a random number between 1 and 20
15
Now computing fibonacci(15)

def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
The result is: 377

Explain what the above code does and what the result means

The provided Python function `fibonacci(n)` calculates the nth number in the Fibonacci sequence, where each number is the sum of the two preceding ones (starting from 0 and 1). Here's a breakdown of how it works:

1. **Base Cases**:
   - If `n` is less than or equal to 0, return an error message "Input should be a positive integer." This ensures that the function doesn't attempt to calculate Fibonacci numbers for non-positive integers.
   - If `n` is 1, return 0. The first number in the Fibonacci sequence is 0.
   - If `n` is 2, return 1. The second number in the Fibonacci sequence is 1.

2. **Recursive Case**:
   - For any other positive integer `n`, the function calls itself twice with arguments `n-1` and `n-2`. It then returns the sum of these two values: `fibonacci(n - 1) + fibonacci(n - 2)`. This is based on the definition of the Fibonacci sequence, where each number is the sum of the previous two.

Given that you asked for a random number between 1 and 20, let's assume this was part of an exercise to generate such a number using the Fibonacci sequence. In practice, generating a random number within a specific range doesn't require the Fibonacci function; it can be done directly with built-in Python functions like `random.randint(a, b)`.

Now, let's compute `fibonacci(15)` based on your request:

```python
def fibonacci(n):
    if n <= 0:
        return "Input should be a positive integer."
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

result = fibonacci(15)
print(f"The {15}th number in the Fibonacci sequence is: {result}")
```

Running this code will output:

```
The 15th number in the Fibonacci sequence is: 377
```

This means that, according to the Fibonacci sequence (where each number starts from 0 and 1), the 15th number is **377**.