/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PDLSchemas = Program | PdlBlock
/**
 * Prompt Declaration Language program (PDL)
 */
export type Program =
  | boolean
  | number
  | string
  | FunctionBlock
  | CallBlock
  | LitellmModelBlock
  | GraniteioModelBlock
  | CodeBlock
  | ArgsBlock
  | GetBlock
  | DataBlock
  | IfBlock
  | MatchBlock
  | RepeatBlock
  | MapBlock
  | TextBlock
  | LastOfBlock
  | ArrayBlock
  | ObjectBlock
  | MessageBlock
  | ReadBlock
  | IncludeBlock
  | ImportBlock
  | ErrorBlock
  | EmptyBlock
  | null
export type Enum = unknown[]
export type PdlTypeType =
  | (
      | "null"
      | "boolean"
      | "string"
      | "number"
      | "integer"
      | "array"
      | "object"
      | "bool"
      | "str"
      | "float"
      | "int"
      | "list"
      | "obj"
    )
  | EnumPdlType
  | PdlTypeType[]
  | OptionalPdlType
  | JsonSchemaTypePdlType
  | ObjectPdlType
  | {
      [k: string]: PdlTypeType
    }
  | null
export type Type = string | string[]
export type BlockType =
  | boolean
  | number
  | string
  | FunctionBlock
  | CallBlock
  | LitellmModelBlock
  | GraniteioModelBlock
  | CodeBlock
  | ArgsBlock
  | GetBlock
  | DataBlock
  | IfBlock
  | MatchBlock
  | RepeatBlock
  | MapBlock
  | TextBlock
  | LastOfBlock
  | ArrayBlock
  | ObjectBlock
  | MessageBlock
  | ReadBlock
  | IncludeBlock
  | ImportBlock
  | ErrorBlock
  | EmptyBlock
  | null
/**
 * Values allowed in the `contribute` field.
 */
export type ContributeTarget = "result" | "context"
export type Value = LocalizedExpression | unknown[] | string
export type Path = string[]
export type File = string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
export type ParserType = ("json" | "jsonl" | "yaml") | PdlParser | RegexParser
export type Regex = string
export type Mode = "search" | "match" | "fullmatch" | "split" | "findall"
export type Evaluate = LocalizedExpression | FunctionBlock | string | null
export type Transformcontext =
  | LocalizedExpression
  | FunctionBlock
  | string
  | null
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType = RequirementType[]
export type ModelInput = {
  [k: string]: unknown
}[]
export type PdlIsLeaf = true
export type Kind = "call"
/**
 * Function to call.
 *
 */
export type Call = LocalizedExpression | FunctionBlock | string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType1 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType1 = RequirementType[]
export type PdlIsLeaf1 = true
export type Kind1 = "model"
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType2 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType2 = RequirementType[]
export type PdlIsLeaf2 = true
export type Kind2 = "model"
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType3 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType3 = RequirementType[]
export type PdlIsLeaf3 = true
export type Kind3 = "code"
/**
 * Programming language of the code.
 *
 */
export type Lang = "python" | "command" | "jinja" | "pdl" | "ipython"
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType4 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType4 = RequirementType[]
export type PdlIsLeaf4 = true
export type Kind4 = "code"
export type Lang1 = "command"
export type ExpressionStr = LocalizedExpression | string
/**
 * The argument vector to spawn.
 *
 */
export type Args1 = ExpressionStr[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType5 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType5 = RequirementType[]
export type PdlIsLeaf5 = true
export type Kind5 = "get"
/**
 * Name of the variable to access.
 */
export type Get = string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType6 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType6 = RequirementType[]
export type PdlIsLeaf6 = true
export type Kind6 = "data"
/**
 * Do not evaluate expressions inside strings.
 */
export type Raw = boolean
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType7 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType7 = RequirementType[]
export type PdlIsLeaf7 = false
export type IndependentEnum = "independent" | "dependent"
export type Kind7 = "if"
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType8 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType8 = RequirementType[]
export type PdlIsLeaf8 = false
export type IndependentEnum1 = "independent" | "dependent"
export type Kind8 = "match"
export type PatternType =
  | boolean
  | number
  | string
  | OrPattern
  | ArrayPattern
  | ObjectPattern
  | AnyPattern
  | null
export type Anyof = PatternType[]
export type Array = PatternType[]
export type Any = null
export type ExpressionBool = LocalizedExpression | boolean | string
export type PdlCaseResult = boolean | null
export type PdlIfResult = boolean | null
export type PdlMatched = boolean | null
/**
 * List of cases to match.
 *
 */
export type With = MatchCase[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType9 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType9 = RequirementType[]
export type PdlIsLeaf9 = false
export type IndependentEnum2 = "independent" | "dependent"
export type Kind9 = "repeat"
/**
 * Arrays to iterate over.
 *
 */
export type For = {
  [k: string]: LocalizedExpression | unknown[] | string
} | null
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType10 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType10 = RequirementType[]
export type PdlIsLeaf10 = false
export type IndependentEnum3 = "independent" | "dependent"
export type Kind10 = "map"
/**
 * Arrays to iterate over.
 *
 */
export type For1 = {
  [k: string]: LocalizedExpression | unknown[] | string
} | null
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType11 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType11 = RequirementType[]
export type PdlIsLeaf11 = false
export type IndependentEnum4 = "independent" | "dependent"
export type Kind11 = "text"
/**
 * Body of the text.
 *
 */
export type Text = BlockType | BlockType[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType12 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType12 = RequirementType[]
export type PdlIsLeaf12 = false
export type IndependentEnum5 = "independent" | "dependent"
export type Kind12 = "lastOf"
/**
 * Sequence of blocks to execute.
 */
export type Lastof = BlockType[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType13 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType13 = RequirementType[]
export type PdlIsLeaf13 = false
export type IndependentEnum6 = "independent" | "dependent"
export type Kind13 = "array"
/**
 * Elements of the array.
 */
export type Array1 = BlockType[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType14 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType14 = RequirementType[]
export type PdlIsLeaf14 = false
export type IndependentEnum7 = "independent" | "dependent"
export type Kind14 = "object"
export type Object2 =
  | {
      [k: string]: BlockType
    }
  | BlockType[]
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType15 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType15 = RequirementType[]
export type PdlIsLeaf15 = true
export type Kind15 = "message"
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType16 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType16 = RequirementType[]
export type PdlIsLeaf16 = true
export type Kind16 = "read"
/**
 * Indicate if one or multiple lines should be read.
 *
 */
export type Multiline = boolean
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType17 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType17 = RequirementType[]
export type PdlIsLeaf17 = false
export type IndependentEnum8 = "independent" | "dependent"
export type Kind17 = "include"
/**
 * Name of the file to include.
 *
 */
export type Include = string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType18 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType18 = RequirementType[]
export type PdlIsLeaf18 = true
export type Kind18 = "import"
/**
 * Name of the file to import.
 *
 */
export type Import = string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType19 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType19 = RequirementType[]
export type PdlIsLeaf19 = true
export type Kind19 = "error"
/**
 * Error message.
 *
 */
export type Msg = string
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType20 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType20 = RequirementType[]
export type PdlIsLeaf20 = true
export type Kind20 = "empty"
export type ExpressionInt = LocalizedExpression | number | string
/**
 * String concatenation of the result of each iteration.
 *
 */
export type As = "text"
/**
 * String used to concatenate each iteration of the loop.
 *
 */
export type With1 = string
/**
 * Return the result of each iteration as an array.
 *
 */
export type As1 = "array"
/**
 * Return the union of the objects created at each iteration.
 *
 */
export type As2 = "object"
/**
 * Return the result of the last iteration.
 *
 */
export type As3 = "lastOf"
export type As4 = "reduce"
/**
 * Function used to combine the results.
 */
export type Reduce = LocalizedExpression | string
export type PdlTrace = BlockType[] | null
export type PdlTrace1 = BlockType[] | null
/**
 * Optional field to ensure that the block is using granite-io.
 *
 */
export type Platform = "granite-io"
/**
 * Parameters sent to the model.
 *
 */
export type Parameters =
  | LocalizedExpression
  | {
      [k: string]: unknown
    }
  | string
  | null
/**
 * Optional field to ensure that the block is using LiteLLM.
 *
 */
export type Platform1 = "litellm"
/**
 * Parameters to send to the model.
 *
 */
export type Parameters1 =
  | LitellmParameters
  | LocalizedExpression
  | {
      [k: string]: unknown
    }
  | string
  | null
export type Timeout = number | string | null
export type Temperature = number | string | null
export type TopP = number | string | null
export type N = number | string | null
export type Stop = string | string[] | null
export type MaxTokens = number | string | null
export type PresencePenalty = number | string | null
export type FrequencyPenalty = number | string | null
export type LogitBias =
  | {
      [k: string]: unknown
    }
  | string
  | null
export type User = string | null
export type ResponseFormat =
  | {
      [k: string]: unknown
    }
  | string
  | null
export type Seed = number | string | null
export type Tools = unknown[] | string | null
export type ToolChoice =
  | string
  | {
      [k: string]: unknown
    }
  | null
export type Logprobs = boolean | string | null
export type TopLogprobs = number | string | null
export type ParallelToolCalls = boolean | string | null
export type ExtraHeaders =
  | {
      [k: string]: unknown
    }
  | string
  | null
export type Functions = unknown[] | string | null
export type FunctionCall = string | null
export type BaseUrl = string | null
export type ApiVersion = string | null
export type ApiKey = string | null
export type ModelList = unknown[] | string | null
export type MockResponse = string | null
export type CustomLlmProvider = string | null
export type MaxRetries = number | string | null
/**
 * Indicate if the block contributes to the result and background context.
 *
 */
export type ContributeType21 = (
  | ContributeTarget
  | {
      [k: string]: ContributeValue
    }
)[]
/**
 * Specify any requirements that the result of the block must satisfy.
 *
 */
export type RequirementsType21 = RequirementType[]
export type PdlIsLeaf21 = true
export type Kind21 = "function"
/**
 * Functions parameters with their types.
 *
 */
export type Function = {
  [k: string]: PdlTypeType
} | null
/**
 * Function signature computed from the function definition.
 *
 */
export type Signature = string | null
export type PdlBlock =
  | boolean
  | number
  | string
  | FunctionBlock
  | CallBlock
  | LitellmModelBlock
  | GraniteioModelBlock
  | CodeBlock
  | ArgsBlock
  | GetBlock
  | DataBlock
  | IfBlock
  | MatchBlock
  | RepeatBlock
  | MapBlock
  | TextBlock
  | LastOfBlock
  | ArrayBlock
  | ObjectBlock
  | MessageBlock
  | ReadBlock
  | IncludeBlock
  | ImportBlock
  | ErrorBlock
  | EmptyBlock
  | null

/**
 * Function declaration.
 */
export interface FunctionBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType21
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType21
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf21
  kind?: Kind21
  function: Function
  /**
   * Body of the function.
   *
   */
  return:
    | boolean
    | number
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  signature?: Signature
}
/**
 * Json Schema with an `enum` field.
 */
export interface EnumPdlType {
  enum: Enum
  [k: string]: unknown
}
/**
 * Optional type.
 */
export interface OptionalPdlType {
  optional: PdlTypeType
}
/**
 * Json Schema with a type field.
 */
export interface JsonSchemaTypePdlType {
  type: Type
  [k: string]: unknown
}
/**
 * Object type.
 */
export interface ObjectPdlType {
  object: Object
}
export interface Object {
  [k: string]: PdlTypeType
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs {
  [k: string]: BlockType
}
/**
 * Calling a function.
 */
export interface CallBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs1
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf
  kind?: Kind
  call: Call
  args?: unknown
  pdl__trace?: BlockType | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs1 {
  [k: string]: BlockType
}
/**
 * Contribution of a specific value instead of the default one.
 */
export interface ContributeValue {
  value: Value
}
export interface LocalizedExpression {
  pdl__expr: PdlExpr
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
}
export interface PdlExpr {
  [k: string]: unknown
}
/**
 * Internal data structure to keep track of the source location information.
 */
export interface PdlLocationType {
  path: Path
  file: File
  table: Table
}
export interface Table {
  [k: string]: number
}
/**
 * Use a PDL program as a parser specification (experimental).
 */
export interface PdlParser {
  description?: string | null
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  pdl: BlockType
}
/**
 * A regular expression parser.
 */
export interface RegexParser {
  description?: string | null
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  regex: Regex
  mode?: Mode
}
/**
 * Single requirement definition.
 */
export interface RequirementType {
  description: unknown
  evaluate: Evaluate
  transformContext: Transformcontext
}
/**
 * Internal data structure to record timing information in the trace.
 */
export interface PdlTiming {
  start_nanos?: number | null
  end_nanos?: number | null
  first_use_nanos?: number | null
  timezone?: string | null
}
/**
 * Call an LLM through [the LiteLLM API](https://docs.litellm.ai/).
 *
 * Example:
 * ```PDL
 * model: ollama/granite-code:8b
 * parameters:
 *   stop: ['!']
 * ```
 */
export interface LitellmModelBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs2
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType1
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType1
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf1
  kind?: Kind1
  /**
   * Messages to send to the model.
   *
   */
  input?:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * Variable where to store the raw response of the model.
   *
   */
  modelResponse?: string | null
  /**
   * Tokens consumed during model call
   *
   */
  pdl__usage?: PdlUsage | null
  pdl__model_input?: ModelInput | null
  platform?: Platform1
  /**
   * Name of the model following the LiteLLM convention.
   *
   */
  model: LocalizedExpression | string
  parameters?: Parameters1
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs2 {
  [k: string]: BlockType
}
/**
 * Call an LLM through the granite-io API.
 */
export interface GraniteioModelBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs3
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType2
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType2
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf2
  kind?: Kind2
  /**
   * Messages to send to the model.
   *
   */
  input?:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * Variable where to store the raw response of the model.
   *
   */
  modelResponse?: string | null
  /**
   * Tokens consumed during model call
   *
   */
  pdl__usage?: PdlUsage | null
  pdl__model_input?: ModelInput | null
  platform?: Platform
  processor: unknown
  parameters?: Parameters
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs3 {
  [k: string]: BlockType
}
/**
 * Execute a piece of code.
 *
 * Example:
 * ```PDL
 * lang: python
 * code: |
 *     import random
 *     # (In PDL, set `result` to the output you wish for your code block.)
 *     result = random.randint(1, 20)
 * ```
 */
export interface CodeBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs4
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType3
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType3
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf3
  kind?: Kind3
  lang: Lang
  /**
   * Code to execute.
   *
   */
  code:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs4 {
  [k: string]: BlockType
}
/**
 * Execute a command line, which will spawn a subprocess with the given argument vector. Note: if you need a shell script execution, you must wrap your command line in /bin/sh or some shell of your choosing.
 *
 * Example:
 * ```PDL
 * args:
 * - /bin/sh
 * - "-c"
 * - "if [[ $x = 1 ]]; then echo y; else echo n; fi"
 * ```
 */
export interface ArgsBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs5
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType4
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType4
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf4
  kind?: Kind4
  lang?: Lang1
  args: Args1
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs5 {
  [k: string]: BlockType
}
/**
 * Get the value of a variable.
 *
 * The GetBlock is deprecated.  Use DataBlock instead.
 */
export interface GetBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs6
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType5
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType5
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf5
  kind?: Kind5
  get: Get
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs6 {
  [k: string]: BlockType
}
/**
 * Arbitrary value, equivalent to JSON.
 *
 * Example. As part of a `defs` section, set `numbers` to the list `[1, 2, 3, 4]`:
 * ```PDL
 * defs:
 *   numbers:
 *     data: [1, 2, 3, 4]
 * ```
 *
 * Example.  Evaluate `${ TEST.answer }` in
 * [Jinja](https://jinja.palletsprojects.com/en/stable/), passing
 * the result to a regex parser with capture groups.  Set
 * `EXTRACTED_GROUND_TRUTH` to an object with attribute `answer`,
 * a string, containing the value of the capture group.
 * ```PDL
 * - data: ${ TEST.answer }
 *   parser:
 *     regex: "(.|\n)*#### (?P<answer>([0-9])*)\n*"
 *     spec:
 *       answer: string
 *   def: EXTRACTED_GROUND_TRUTH
 * ```
 */
export interface DataBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs7
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType6
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType6
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf6
  kind?: Kind6
  data: unknown
  raw?: Raw
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs7 {
  [k: string]: BlockType
}
/**
 * Conditional control structure.
 *
 * Example:
 * ```PDL
 * defs:
 *   answer:
 *     read:
 *     message: "Enter a number? "
 * if: ${ (answer | int) == 42 }
 * then: You won!
 * ```
 */
export interface IfBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs8
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType7
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType7
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf7
  context?: IndependentEnum
  kind?: Kind7
  /**
   * Condition.
   *
   */
  if: LocalizedExpression | boolean | string
  /**
   * Branch to execute if the condition is true.
   *
   */
  then:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * Branch to execute if the condition is false.
   *
   */
  else?: BlockType | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs8 {
  [k: string]: BlockType
}
/**
 * Match control structure.
 *
 * Example:
 * ```PDL
 * defs:
 *   answer:
 *     read:
 *     message: "Enter a number? "
 * match: ${ (answer | int) }
 * with:
 * - case: 42
 *   then: You won!
 * - case:
 *     any:
 *     def: x
 *   if: ${ x > 42 }
 *   then: Too high
 * - then: Too low
 */
export interface MatchBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs9
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType8
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType8
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf8
  context?: IndependentEnum1
  kind?: Kind8
  match: unknown
  with: With
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs9 {
  [k: string]: BlockType
}
/**
 * Case of a match.
 */
export interface MatchCase {
  case?: PatternType | null
  if?: ExpressionBool | null
  then: BlockType
  pdl__case_result?: PdlCaseResult
  pdl__if_result?: PdlIfResult
  pdl__matched?: PdlMatched
}
/**
 * Match any of the patterns.
 */
export interface OrPattern {
  def?: string | null
  anyOf: Anyof
}
/**
 * Match an array.
 */
export interface ArrayPattern {
  def?: string | null
  array: Array
}
/**
 * Match an object.
 */
export interface ObjectPattern {
  def?: string | null
  object: Object1
}
export interface Object1 {
  [k: string]: PatternType
}
/**
 * Match any value.
 */
export interface AnyPattern {
  def?: string | null
  any: Any
}
/**
 * Repeat the execution of a block sequentially.
 * The scope and `pdl_context` are accumulated in between iterations.
 *
 * For loop example:
 * ```PDL
 * for:
 *     number: [1, 2, 3, 4]
 *     name: ["Bob", "Carol", "David", "Ernest"]
 * repeat:
 *     "${ name }'s number is ${ number }\n"
 * ```
 *
 * While loop:
 * ```PDL
 * defs:
 *   i: 0
 * while: ${i < 5}
 * repeat:
 *     defs:
 *       i: ${ i + 1}
 *     data: ${ i }
 * join:
 *   as: array
 * ```
 */
export interface RepeatBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs10
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType9
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType9
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf9
  context?: IndependentEnum2
  kind?: Kind9
  for?: For
  /**
   * Name of the variable containing the loop iteration.
   *
   */
  index?: string | null
  /**
   * Condition to stay at the beginning of the loop.
   *
   */
  while?: LocalizedExpression | boolean | string
  /**
   * Body of the loop.
   *
   */
  repeat:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * Condition to exit at the end of the loop.
   *
   */
  until?: LocalizedExpression | boolean | string
  /**
   * Maximal number of iterations to perform.
   *
   */
  maxIterations?: ExpressionInt | null
  /**
   * Define how to combine the result of each iteration.
   *
   */
  join?: JoinText | JoinArray | JoinObject | JoinLastOf | JoinReduce
  pdl__trace?: PdlTrace1
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs10 {
  [k: string]: BlockType
}
/**
 * Independent executions of  a block.
 * Repeat the execution of a block starting from the initial scope
 * and `pdl_context`.
 *
 * For loop example:
 * ```PDL
 * for:
 *     number: [1, 2, 3, 4]
 *     name: ["Bob", "Carol", "David", "Ernest"]
 * map:
 *     "${ name }'s number is ${ number }\n"
 * ```
 *
 * Bounded loop:
 * ```PDL
 * index: i
 * maxIterations: 5
 * map:
 *     ${ i }
 * join:
 *   as: array
 * ```
 */
export interface MapBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs11
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType10
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType10
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf10
  context?: IndependentEnum3
  kind?: Kind10
  for?: For1
  /**
   * Name of the variable containing the loop iteration.
   *
   */
  index?: string | null
  /**
   * Body of the iterator.
   *
   */
  map:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * Maximal number of iterations to perform.
   *
   */
  maxIterations?: ExpressionInt | null
  /**
   * Define how to combine the result of each iteration.
   *
   */
  join?: JoinText | JoinArray | JoinObject | JoinLastOf | JoinReduce
  /**
   * Maximal number of workers to execute the map in parallel. Is it is set to `0`, the execution is sequential otherwise it is given as argument to the `ThreadPoolExecutor`.
   *
   */
  maxWorkers?: number | null
  pdl__trace?: PdlTrace
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs11 {
  [k: string]: BlockType
}
/**
 * Create the concatenation of the stringify version of the result of each block of the list of blocks.
 */
export interface TextBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs12
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType11
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType11
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf11
  context?: IndependentEnum4
  kind?: Kind11
  text: Text
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs12 {
  [k: string]: BlockType
}
/**
 * Return the value of the last block if the list of blocks.
 */
export interface LastOfBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs13
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType12
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType12
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf12
  context?: IndependentEnum5
  kind?: Kind12
  lastOf: Lastof
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs13 {
  [k: string]: BlockType
}
/**
 * Return the array of values computed by each block of the list of blocks.
 */
export interface ArrayBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs14
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType13
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType13
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf13
  context?: IndependentEnum6
  kind?: Kind13
  array: Array1
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs14 {
  [k: string]: BlockType
}
/**
 * Return the object where the value of each field is defined by a block. If the body of the object is an array, the resulting object is the union of the objects computed by each element of the array.
 */
export interface ObjectBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs15
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType14
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType14
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf14
  context?: IndependentEnum7
  kind?: Kind14
  object: Object2
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs15 {
  [k: string]: BlockType
}
/**
 * Create a message.
 */
export interface MessageBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs16
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType15
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType15
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf15
  kind?: Kind15
  /**
   * Content of the message.
   */
  content:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
  /**
   * For example, the name of the tool that was invoked, for which this message is the tool response.
   */
  name?: ExpressionStr | null
  /**
   * The id of the tool invocation for which this message is the tool response.
   */
  tool_call_id?: ExpressionStr | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs16 {
  [k: string]: BlockType
}
/**
 * Read from a file or standard input.
 *
 * Example. Read from the standard input with a prompt starting with `> `.
 * ```PDL
 * read:
 * message: "> "
 * ```
 *
 * Example. Read the file `./data.yaml` in the same directory of the PDL file containing the block and parse it into YAML.
 * ```PDL
 * read: ./data.yaml
 * parser: yaml
 * ```
 */
export interface ReadBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs17
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType16
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType16
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf16
  kind?: Kind16
  /**
   * Name of the file to read. If `None`, read the standard input.
   *
   */
  read: ExpressionStr | null
  /**
   * Message to prompt the user to enter a value.
   *
   */
  message?: string | null
  multiline?: Multiline
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs17 {
  [k: string]: BlockType
}
/**
 * Include a PDL file.
 */
export interface IncludeBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs18
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType17
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType17
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf17
  context?: IndependentEnum8
  kind?: Kind17
  include: Include
  pdl__trace?: BlockType | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs18 {
  [k: string]: BlockType
}
/**
 * Import a PDL file.
 */
export interface ImportBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs19
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType18
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType18
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf18
  kind?: Kind18
  import: Import
  pdl__trace?: BlockType | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs19 {
  [k: string]: BlockType
}
/**
 * Block representing an error generated at runtime.
 */
export interface ErrorBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs20
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType19
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType19
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf19
  kind?: Kind19
  msg: Msg
  /**
   * Block that raised the error.
   *
   */
  program:
    | boolean
    | number
    | string
    | FunctionBlock
    | CallBlock
    | LitellmModelBlock
    | GraniteioModelBlock
    | CodeBlock
    | ArgsBlock
    | GetBlock
    | DataBlock
    | IfBlock
    | MatchBlock
    | RepeatBlock
    | MapBlock
    | TextBlock
    | LastOfBlock
    | ArrayBlock
    | ObjectBlock
    | MessageBlock
    | ReadBlock
    | IncludeBlock
    | ImportBlock
    | ErrorBlock
    | EmptyBlock
    | null
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs20 {
  [k: string]: BlockType
}
/**
 * Block without an action. It can contain definitions.
 */
export interface EmptyBlock {
  /**
   * Documentation associated to the block.
   *
   */
  description?: string | null
  /**
   * Type specification of the result of the block.
   *
   */
  spec?:
    | (
        | "null"
        | "boolean"
        | "string"
        | "number"
        | "integer"
        | "array"
        | "object"
        | "bool"
        | "str"
        | "float"
        | "int"
        | "list"
        | "obj"
      )
    | EnumPdlType
    | PdlTypeType[]
    | OptionalPdlType
    | JsonSchemaTypePdlType
    | ObjectPdlType
    | {
        [k: string]: PdlTypeType
      }
    | null
  defs?: Defs21
  /**
   * Name of the variable used to store the result of the execution of the block.
   *
   */
  def?: string | null
  contribute?: ContributeType20
  /**
   * Parser to use to construct a value out of a string result.
   */
  parser?: ParserType | null
  /**
   * Block to execute in case of error.
   *
   */
  fallback?: BlockType | null
  /**
   * The maximum number of times to retry when an error occurs within a block.
   *
   */
  retry?: number | null
  /**
   * Whether to add the errors while retrying to the trace. Set this to true to use retry feature for multiple LLM trials.
   *
   */
  trace_error_on_retry?: boolean | string | null
  requirements?: RequirementsType20
  /**
   * Role associated to the block and sub-blocks.
   * Typical roles are `system`, `user`, and `assistant`,
   * but there may be other roles such as `available_tools`.
   */
  role?: string | null
  /**
   * Current context.
   */
  pdl__context?: ModelInput | null
  /**
   * Unique identifier for this block.
   */
  pdl__id?: string | null
  pdl__result?: unknown
  pdl__location?: PdlLocationType | null
  /**
   * Execution timing information.
   */
  pdl__timing?: PdlTiming | null
  pdl__is_leaf?: PdlIsLeaf20
  kind?: Kind20
}
/**
 * Set of definitions executed before the execution of the block.
 *
 */
export interface Defs21 {
  [k: string]: BlockType
}
/**
 * Join loop iterations as a string.
 */
export interface JoinText {
  as?: As
  with?: With1
}
/**
 * Join loop iterations as an array.
 */
export interface JoinArray {
  as: As1
}
/**
 * Join loop iterations as an object.
 */
export interface JoinObject {
  as: As2
}
/**
 * Join loop iterations as the value of the last iteration.
 */
export interface JoinLastOf {
  as: As3
}
/**
 * Join loop iterations as the value of the last iteration.
 */
export interface JoinReduce {
  as?: As4
  reduce: Reduce
}
/**
 * Internal data structure to record token consumption usage information.
 */
export interface PdlUsage {
  completion_tokens?: number | null
  prompt_tokens?: number | null
  [k: string]: unknown
}
/**
 * Parameters passed to LiteLLM. More details at [https://docs.litellm.ai/docs/completion/input](https://docs.litellm.ai/docs/completion/input).
 *
 * Note that not all models and platforms accept all parameters.
 */
export interface LitellmParameters {
  timeout?: Timeout
  temperature?: Temperature
  top_p?: TopP
  n?: N
  stop?: Stop
  max_tokens?: MaxTokens
  presence_penalty?: PresencePenalty
  frequency_penalty?: FrequencyPenalty
  logit_bias?: LogitBias
  user?: User
  response_format?: ResponseFormat
  seed?: Seed
  tools?: Tools
  tool_choice?: ToolChoice
  logprobs?: Logprobs
  top_logprobs?: TopLogprobs
  parallel_tool_calls?: ParallelToolCalls
  extra_headers?: ExtraHeaders
  functions?: Functions
  function_call?: FunctionCall
  base_url?: BaseUrl
  api_version?: ApiVersion
  api_key?: ApiKey
  model_list?: ModelList
  mock_response?: MockResponse
  custom_llm_provider?: CustomLlmProvider
  max_retries?: MaxRetries
  [k: string]: unknown
}
