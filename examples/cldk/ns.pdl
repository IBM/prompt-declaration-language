description: NorthStar Assitant
document: 
- read:
  def: project
  message: "Please enter the path to your Java project:\n"
  show_result: false
- lan: python
  def: analysis
  show_result: false
  code:
  - |
    from northstar import Northstar
    from pprint import pprint 

    # Typing goodies
    from typing import Set, List, Dict
    from northstar.models.java.models import JCallable
    from rich.pretty import pprint as print

    # Initialize the Northstar object with the project directory, language, and analysis_backend.
    ns = Northstar(language="java")

    SAMPLE_DIR = "/Users/mvaziri/ai4code/sample-code"

    # Get the java application view for the project.
    java_analysis = ns.analysis(project_path=SAMPLE_DIR, eager=True)

    # Get all the application view of the project.
    # Application view contails class level docstring, all imports, and all defined classes in a java file.
    app = java_analysis.get_application_view()

    meta_data = list()

    javasitter = ns.treesitter_parser()

    meta_data = list()
    for compilation_unit in java_analysis.get_compilation_units():
        # Obtain a list of file level imports. 
        imports: Set[str] = set(compilation_unit.imports)

        # Second, iterate over all the classes in the file.
        for class_name, class_info in compilation_unit.type_declarations.items():
            methods: Dict[str, JCallable] = class_info.callable_declarations
            for method_name, method_info in methods.items():
                method_dict = {}
                method_dict["function_name"] = method_info.signature
                method_dict["args"] = [f"{param.type} {param.name}" for param in method_info.parameters]
                method_dict["docstring"] = method_info.comment
                method_dict["body"] = method_info.code

                # Filter out all type invocations (imports) from the method body
                used_imports = set()
                for _import in imports:
                    for used_import in javasitter.get_all_type_invocations(method_info.code):
                        if used_import in _import:
                            used_imports.add(_import)
                
                method_dict["libraries_used"] = used_imports

                meta_data.append(method_dict)
    result = meta_data[-10:]
- repeat:
  - read:
    def: query
    message: "\n\nHow can I help you [Type 'quit' to quit]?\n"
    show_result: false
  - if: "{{ query != 'quit'}}"
    then: 
    - model: meta-llama/llama-3-70b-instruct
      platform: bam
      input: 
      - |
        In the following code, {{ query }}
        {{ analysis }}
  until: "{{ query == 'quit' }}"
