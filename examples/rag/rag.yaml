description: Retrieval-augmented generation for NL-to-Code generation task.
defs:
  TEST:
    lan: python
    code:
    - import datasets
    - train_data = datasets.load_dataset("mbpp", "sanitized", split="train")
    - pdl_session["index"] = train_data.add_faiss_index("embeddings")
    - test_data = datasets.load_dataset("mbpp", "sanitized", split="test")
    - result = test_data[0]
  RETRIEVED:
    lan: python
    code:
    - text = np.array({{{ TEST.text }}})
    - result = pdl_session["index"].get_nearest_examples("embeddings", text, 3)
  AUGMENTATION: |
    Q: {{{ RETRIEVED[0].text }}}
    A: ```{{{ RETRIEVED[0].code }}}```

    Q: {{{ RETRIEVED[1].text }}}
    A: ```{{{ RETRIEVED[1].code }}}```

    Q: {{{ RETRIEVED[2].text }}}
    A: ```{{{ RETRIEVED[2].code }}}```
  GENERATED:
    model: ibm/granite-20b-code-instruct-v1
    input: |
      Given text after "Q:", generate a Python function after "A:".

      {{{ AUGMENTATION }}}
      
      Q: {{{ TEST.text }}}
      A: ```
    parameters:
      stop_sequences:
      - "```"
      include_stop_sequence: false
document: |
  text:
  {{{ TEST.text }}}

  generated code:
  ```{{{ GENERATED }}}```

  ground truth:
  ```{{{ TEST.code }}}```
