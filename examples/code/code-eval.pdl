description: Code explanation example
defs:
  # The variable `CODE` shall be the contents of the parsed YAML file
  CODE:
    read: ./data.yaml
    parser: yaml
  # The variable `TRUTH` shall be the text of the file
  TRUTH:
    read: ./ground_truth.txt
text:
# Print the source code to the console
- "\n${ CODE.source_code }\n"
# Use replicate.com to invoke a Granite model with a prompt.  Output AND
# set the variable `EXPLANATION` to the output.
- model: replicate/ibm-granite/granite-3.0-8b-instruct
  def: EXPLANATION
  input: |
      Here is some info about the location of the function in the repo.
      repo: 
      ${ CODE.repo_info.repo }
      path: ${ CODE.repo_info.path }
      Function_name: ${ CODE.repo_info.function_name }


      Explain the following code:
      ```
      ${ CODE.source_code }```
  parameters:
    # Use no LLM creativity.  (Note that 0 is the default; this line has no effect)
    temperature: 0
- |


  EVALUATION:
  The similarity (Levenshtein) between this answer and the ground truth is:
# We aren't only defining `EVAL`, we are also executing it.
- def: EVAL
  lang: python
  # (Use `pip install textdistance` if needed to install the textdistance package)
  code: |
    import textdistance
    expl = """
    ${ EXPLANATION }
    """
    truth = """
    ${ TRUTH }
    """
    # (In PDL, set `result` to the output you wish for your code block.)
    result = textdistance.levenshtein.normalized_similarity(expl, truth)
