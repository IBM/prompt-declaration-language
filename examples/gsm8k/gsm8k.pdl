#!/usr/bin/env pdl

# Grade School Math https://github.com/openai/grade-school-math is an
# open source AI dataset from 2021.
# 
# https://github.com/openai/grade-school-math/blob/master/grade_school_math/data/test.jsonl
# is a file with 1319 questions and answers.
#
#

description: Grade School Math
defs:
  # The Grade School Math Dataset
  ALL_TESTS:
    read: ./test.jsonl
    parser: jsonl

  # How many problems to evaluate.  The entire dataset is 1319 problems.
  # MAX_ITERATIONS: 1319
  MAX_ITERATIONS: 10
  # Which model to use
  # MODEL: ollama/granite-code:8b
  # MODEL: ollama/granite3.2:8b
  MODEL: watsonx/ibm/granite-3-2-8b-instruct

  # PDL variables that hold statistics
  SUCCESSES: 0
  FAILURES: 0
  TESTS: ${ ALL_TESTS[:MAX_ITERATIONS] }
  SOLUTIONS:
    defs:
      stats:
        function:
          r1: { success: integer, text: string}
          r2: { success: integer, text: string}
        return:
          data:
            success: ${ r1.success + r2.success }
            text: ${ r1.text + "\n\n" + r2.text }
    for:
      TEST: ${ TESTS }
    # maxWorkers: 10
    map:
      defs:
        # First phase: ask LLM the Grade School Math questions
        LLM_FULL_ANSWER:
          model: ${ MODEL }
            # First, get LLM to answer the question
          input: |
            Question: ${ TEST.question }
            Answer: 
        # Next, get LLM to convert its answer into a single JSON key/value
        SIMPLIFIED_LLM_ANSWER:
          model: ${ MODEL }
          input: |
            Generate the final answer from the conclusion of this text as JSON with a single key named answer.
            ${ LLM_FULL_ANSWER }
        # Third phase: Compare with Grade School Math ground truth
      lastOf:
        # Convert the JSON string to JSON.  (We do this in a separate step so
        # we have access to the original for debugging.)
        - data: ${ SIMPLIFIED_LLM_ANSWER }
          parser: json
          def: JSON_SIMPLIFIED_LLM_ANSWER

          # Strip off any prefix or suffix off the number (dollar signs, units, etc)
          # and place it in of the JSON format { "answer": ... }
        - data: ${ JSON_SIMPLIFIED_LLM_ANSWER.answer|string if 'answer' in JSON_SIMPLIFIED_LLM_ANSWER else ("MISSING 'answer' in " + LLM_FULL_ANSWER) }
          parser:
            regex: "[^0-9]*(?P<answer>[0-9]+).*$"
            spec:
              answer: string
          def: EXTRACTED_SIMPLIFIED_LLM_ANSWER
        # (In case the simplified answer did not contain digits.)
        - if: ${ EXTRACTED_SIMPLIFIED_LLM_ANSWER == None }
          then:
            def: EXTRACTED_SIMPLIFIED_LLM_ANSWER
            data:
              answer: "none"

        # Extract the expected answer, which in this test data always follows "#### "
        # into { "answer": ... }
        - data: ${ TEST.answer }
          parser:
            regex: "(.|\n)*#### (?P<answer>([0-9])*)\n*"
            spec:
              answer: string
          def: EXTRACTED_GROUND_TRUTH

          # Did we get the expected answer?
        - if: ${ EXTRACTED_SIMPLIFIED_LLM_ANSWER.answer == EXTRACTED_GROUND_TRUTH.answer}
          then:
            object:
              success: 1
              text: |
                LLM got right answer for '${ LLM_FULL_ANSWER }' which was simplified to '${ SIMPLIFIED_LLM_ANSWER }' which was extracted to '${ EXTRACTED_SIMPLIFIED_LLM_ANSWER.answer }'
          else:
            object:
              success: 0
              text: |
                WRONG! Wanted ${ EXTRACTED_GROUND_TRUTH.answer} } / LLM said '${ LLM_FULL_ANSWER }' which was simplified to '${ SIMPLIFIED_LLM_ANSWER }' which was extracted to '${ EXTRACTED_SIMPLIFIED_LLM_ANSWER.answer }'
    join:
      reduce: ${ stats }
text:
  Finished, ${ SOLUTIONS.success } successes on ${ MAX_ITERATIONS } tests
