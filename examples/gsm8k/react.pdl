description: Function definition for react
defs:
  react_inner:
    function:
      examples: [str]
      question: str
    return:
      text:
      - defs:
          tools:
            data:
            - type: function
              function: 
                name: Calc
                description: Calculator function
                parameters:
                  type: object
                  properties:
                    expr: 
                      type: string
                      description: Arithmetic expression to calculate
                  required:
                  - expr
      - for:
          ex: ${ examples }
        repeat:
          "${ ex }\n"
      - role: system
        text: You are a helpful assistant with access to the following function calls. Your task is to produce a sequence of function calls necessary to generate response to the user utterance. Use the following function calls as required.
        contribute: [context]
      - role: available_tools
        text: ${ tools }
        contribute: [context]
      - "\n"
      - ${ question }
      - "\n"
      - def: prev_action
        contribute: []
        data: none
      - def: exit
        contribute: []
        data: False
      - repeat:
          text:
          - def: thought
            model: openai/granite-3.0-8b-instruct-schemas
            parameters:
              api_key: EMPTY
              api_base: http://aims-01.sl.res.ibm.com:39003/v1/
              temperature: 0
              top_p: 1
              stop: "Act:,\n"
          - "Act:\n"
          - def: action
            model: openai/granite-3.0-8b-instruct-schemas
            parameters:
              api_key: EMPTY
              api_base: http://aims-01.sl.res.ibm.com:39003/v1/
              temperature: 0
              top_p: 1
              stop: "\n"
            parser: json
            spec: [{ name: str, arguments: { expr: str }}] 
          - if: ${ action != prev_action}
            then:
              if: ${ action[0].name == "Calc" }
              then:
                text:
                - "\nObs: "
                - lang: python
                  code: result = ${ action[0].arguments.expr }
                - "\n"
            else:
              def: exit
              contribute: []
              data: True
          - def: prev_action
            contribute: []
            data: ${ action }
        until: ${ action[0].name == "Finish" or exit }
  
  react:
    function:
      question: str
    return:
        defs: 
          examples:
            array:
                - text: 
                    |
                    Roger has 5 tennis balls. He buys 2 more cans of tennis balls. 
                    Each can has 3 tennis balls. How many tennis balls does he have now?

                    Tho: Roger started with 5 tennis balls
                    Tho: He bought 2 cans of 3 tennis balls each is. I need to call a calculator.
                    Act:
                    [{"name": "Calc", "arguments": {"expr": "2 * 3"}}]
                    Obs: 6
                    Tho: He bought 6 balls
                    Tho: Roger now has 5 + 6 balls. I need to call a calculator
                    Act:
                    [{"name": "Calc", "arguments": {"expr": "5 + 6"}}]
                    Obs: 11
                    [{"name": "Finish", "arguments": {"expr": "11"}}]


        call: react_inner
        args:
          pdl_context: []
          examples: ${ examples }
          question: ${ question }


