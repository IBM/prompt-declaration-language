description: ReWOO (Reasoning without observation) pattern from Xu et al., (http://arxiv.org/abs/2305.18323)
# Compared to ReAct, reduced token consumption (and thus execution time),
# by generating full chain of tools in a single pass
# see: https://github.com/langchain-ai/langgraph/blob/main/examples/rewoo/rewoo.ipynb
defs:
  rewoo_block:
    function:
      trajectory: { list: obj }
    return:
      - def: i
        show_result: false
        data: 1
      - for:
          trajectory: "{{ trajectory }}"
        repeat:
          - defs: 
              type:
                document: "{{ trajectory.keys()|first }}"
              content:
                document: "{{ trajectory.values()|first }}"
          - if: "{{ type == 'question'}}"
            then: |
              Task: {{ content }}
          - if: "{{ type == 'thought'}}"
            then: |-
              Plan: {{ content }}
          - if: "{{ type == 'action'}}"
            then:
              - " #E{{ i }} = {{ content }}\n"
              - defs:
                  i:
                    data: "{{ i+1 }}"
          - if: "{{ type == 'observation'}}"
            then: ""
          - if: "{{ type not in ['question', 'thought', 'action', 'observation'] }}"
            then: "{{ type }}: {{ content }}"
      - "\n"

  rewoo:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
      show_plans: bool
    return:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: "{{ tools }}"
      - |
        For the following task, make plans that can solve the problem step by step. For each plan, indicate 
        which external tool together with tool input to retrieve evidence. You can store the evidence into a 
        variable #E that can be called by later tools. (Plan, #E1, Plan, #E2, Plan, ...)

        Tools can be one of the following:
      - for:
          i: "{{ range(1, (tools|length)+1)|list }}"
          name: "{{ TOOL_INFO.names }}"
          sig: "{{ TOOL_INFO.signatures }}"
          desc: "{{ TOOL_INFO.descriptions }}"
        repeat: |
          ({{i}}) {{ sig }}: {{ desc }}
      - "\n"
      - for:
          tool: "{{ tools }}"
        repeat:
          for:
            example: "{{ tool.examples }}"
          repeat:
            call: rewoo_block
            args:
              trajectory: "{{ example }}"
      - for:
          traj: "{{ trajectories }}"
        repeat:
          call: rewoo_block
          args:
            trajectory: "{{ traj }}"
      - "\n"
      - |
        Begin! 
        Describe your plans with rich details. Each Plan should be followed by only one #E.

        Task: {{ task }}
      - def: PLANS
        model: "{{ model }}"
        platform: bam
        parser: # plan, step_name, tool, tool_input
          regex: 'Plan:\s*(?P<plan>(?:.|\n)*?)\s*(?P<step_name>#E\d+)\s*=\s*(?P<tool>\w+)\s*\[(?P<tool_input>[^\]]+)\]'
          mode: findall
        parameters:
          decoding_method: greedy
          stop_sequences:
            - "<|endoftext|>"
          include_stop_sequence: false
      - if: "{{ show_plans }}"
        then:
          - "\n\n\u001b[34m--- Extracted Blueprint ---\n"
          - for:
              plan: "{{ PLANS }}"
            repeat:
              - "\u001b[31mPlan: {{ plan[0] }}\n"
              - "\u001b[32m{{ plan[1] }} = {{ plan[2] }}[{{ plan[3] }}]\n"
          - "\n\u001b[37m"
      - defs:
          output:
            data: {}
          plans:
            for:
              plan: "{{ PLANS }}"
            repeat:
              - defs:
                  PLAN: "{{ plan[0] }}"
                  ID: "{{ plan[1] }}"
                  ACTION: "{{ plan[2] }}"
                  SUBJECT: "{{ plan[3] }}"
                  SUBJECT_REPLACED:
                    lan: python
                    code: |-
                      for k,v in output.items():
                        if k in SUBJECT:
                          SUBJECT = SUBJECT.replace(k, v)
                      result = SUBJECT
                  raw_tool_output:
                    if: "{{ ACTION in TOOL_INFO.names }}"
                    then:
                      call: "{{ ACTION }}"
                      args:
                        subject: "{{ SUBJECT_REPLACED }}"
                    else: "Invalid action. Valid actions are {{ TOOL_INFO.signatures|join(', ') }} and Finish[<answer>]."
                  tool_output: "{{ raw_tool_output }}"
              - def: output
                show_result: false
                lan: python
                code: |
                  output[ID] = str(tool_output)
                  result = output
              # - data:
              #     plan: "{{ PLAN }}"
              #     key: "{{ ID }}"
              #     value: "{{ tool_output }}"
              #     subject: "{{ SUBJECT }}"
              #     subject_replaced: "{{ SUBJECT_REPLACED }}"
              - |
                Plan: {{ PLAN }}
                Evidence: {{ tool_output }}
      # - def: EVIDENCE
      #   show_result: false
      #   document:
      #     for:
      #       plan: "{{ plans }}"
      #     repeat:
      #       - |
      #         Plan: {{ plan.plan }}
      #         Evidence: {{ plan.value }}
      - def: solution_input
        document: |-
          Solve the following task or problem. To solve the problem, we have made step-by-step Plan and retrieved corresponding Evidence to each Plan. Use them with caution since long evidence might contain irrelevant information.

          {{ plans|join }}
          Now solve the question or task according to provided Evidence above. Respond with the answer directly with no extra words.

          Task: {{ task }}
          Response:
      - def: SOLUTION
        model: "{{ model }}"
        parameters:
          decoding_method: greedy
          stop_sequences:
            - "<|endoftext|>"
          include_stop_sequence: false
        input:
          document: "{{ solution_input }}"
      - "\n\nJSON Output: "
      - data:
          answer: "{{ SOLUTION }}"
