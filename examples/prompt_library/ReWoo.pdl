description: ReWOO (Reasoning without observation) pattern from Xu et al., (http://arxiv.org/abs/2305.18323)
# Compared to ReAct, reduced token consumption (and thus execution time),
# by generating full chain of tools in a single pass
# see: https://github.com/langchain-ai/langgraph/blob/main/examples/rewoo/rewoo.ipynb
defs:
  task: "When did the Battle of White Plains take place?"

  default_tools: |
    import wikipedia
    match plan[2].strip():
      case 'Wikipedia':
        try:
          result = wikipedia.summary(plan[3])
        except wikipedia.WikipediaException as error:
          result = str(error)
      case _:
        result = "Invalid Action. Valid Actions are Wikipedia[<topic>] and Finish[<answer>]."

  rewoo:
    function:
      task: str
      model: str
      tools: str
      show_plans: bool
    return:
      - |
        For the following task, make plans that can solve the problem step by step. For each plan, indicate 
        which external tool together with tool input to retrieve evidence. You can store the evidence into a 
        variable #E that can be called by later tools. (Plan, #E1, Plan, #E2, Plan, ...)

        Tools can be one of the following:
        (1) Wikipedia[input]: Worker that searches results from Wikipedia. Useful when you need to find short
        and succinct answers about a specific topic. The input should be a search query.
        (2) LLM[input]: A pretrained LLM like yourself. Useful when you need to act with general
        world knowledge and common sense. Prioritize it when you are confident in solving the problem
        yourself. Input can be any instruction.

        For example,
        Task: Thomas, Toby, and Rebecca worked a total of 157 hours in one week. Thomas worked x
        hours. Toby worked 10 hours less than twice what Thomas worked, and Rebecca worked 8 hours
        less than Toby. How many hours did Rebecca work?
        Plan: Given Thomas worked x hours, translate the problem into algebraic expressions and solve
        with Wolfram Alpha. #E1 = WolframAlpha[Solve x + (2x - 10) + ((2x - 10) - 8) = 157]
        Plan: Find out the number of hours Thomas worked. #E2 = LLM[What is x, given #E1]
        Plan: Calculate the number of hours Rebecca worked. #E3 = Calculator[(2 * #E2 - 10) - 8]

        Begin! 
        Describe your plans with rich details. Each Plan should be followed by only one #E.

        Task: {{ task }}
      - def: PLANS
        model: "{{ model }}"
        platform: bam
        show_result: false
        parser: # plan, step_name, tool, tool_input
          regex: 'Plan:\s*(?P<plan>.+)\s*(?P<step_name>#E\d+)\s*=\s*(?P<tool>\w+)\s*\[(?P<tool_input>[^\]]+)\]'
          mode: findall
        parameters:
          stop_sequences:
            - "<|endoftext|>"
          include_stop_sequence: false
      - if: "{{ show_plans }}"
        then:
          - "\u001b[34m--- Extracted Blueprint ---\n"
          - for:
              plan: "{{ PLANS }}"
            repeat:
              - "\u001b[31mPlan: {{ plan[0] }}\n"
              - "\u001b[32m{{ plan[1] }} = {{ plan[2] }}[{{ plan[3] }}]\n"
          - "\n\u001b[37m"
      - def: EVIDENCE
        show_result: false
        document:
          for:
            plan: "{{ PLANS }}"
          repeat:
            - def: ACTION
              show_result: false
              document: "{{ plan[2] }}"
            - def: SUBJECT
              show_result: false
              document: "{{ plan[3] }}"
            - |-
              Plan: {{ plan[0] }}
              Evidence:
            - if: "{{ ACTION in TOOL_INFO.names }}"
              then:
                - call: "{{ ACTION }}"
                  args:
                    subject: "{{ SUBJECT }}"
              else: "Invalid action. Valid actions are {{ TOOL_INFO.signatures|join(', ') }} and Finish[<answer>]."
      - def: SOLUTION
        model: "{{ model }}"
        parameters:
          stop_sequences:
            - "<|endoftext|>"
          include_stop_sequence: false
        input:
          document:
            - |-
              Solve the following task or problem. To solve the problem, we have made step-by-step Plan and retrieved corresponding Evidence to each Plan. Use them with caution since long evidence might contain irrelevant information.

              {{ EVIDENCE }}

              Now solve the question or task according to provided Evidence above. Respond with the answer directly with no extra words.

              Task: {{ task }}
              Response: 
document:
- def: parsed
  show_result: false
  parser: # plan, step_name, tool, tool_input
    regex: 'Plan:\s*(?P<plan>(?:.|\n)*?)\s*(?P<step_name>#E\d+)\s*=\s*(?P<tool>\w+)\s*\[(?P<tool_input>[^\]]+)\]'
    mode: findall
  document: |
    For example,
    Task: Thomas, Toby, and Rebecca worked a total of 157 hours in one week. Thomas worked x
    hours. Toby worked 10 hours less than twice what Thomas worked, and Rebecca worked 8 hours
    less than Toby. How many hours did Rebecca work?
    Plan: Given Thomas worked x hours, translate the problem into algebraic expressions and solve
    with Wolfram Alpha. #E1 = WolframAlpha[Solve x + (2x - 10) + ((2x - 10) - 8) = 157]
    Plan: Find out the number of hours Thomas worked. #E2 = LLM[What is x, given #E1]
    Plan: Calculate the number of hours Rebecca worked. #E3 = Calculator[(2 * #E2 - 10) - 8]
- def: output
  data: {}
- def: plans
  show_result: true
  for:
    plan: "{{ parsed }}"
  repeat:
    - "{{ output }}"
    - def: PLAN
      show_result: false
      document: "{{ plan[0] }}"
    - def: ID
      show_result: false
      document: "{{ plan[1] }}"
    - def: ACTION
      show_result: false
      document: "{{ plan[2] }}"
    - def: SUBJECT
      show_result: false
      document: "{{ plan[3] }}"
        # for:
        #   test: "{{ output }}"
        # repeat: "{{ plan[3]|replace(test, test) }}"
        
    - def: output
      show_result: false
      lan: python
      code: |
        output[ID] = SUBJECT
        result = output
    # "{{ output + [{'key': ID, 'value': SUBJECT}] }}"
    # - def: OBSERVATION
    #   show_result: false
    #   document:
    #     - lan: python
    #       code: |
    #         print("---", parsed)
    #         print("---plan: ", plan)
    #         result = ""
    # - def: plan
    #   data:
    #     plan: "{{ plan[0] }}"
    #     id: "{{ plan[1] }}"
    #     action: "{{ plan[2] }}"
    #     subject: "{{ plan[3] }}"
    #     observation: "hi"
    # - "{{ parsed|list }}"
- "{{ output }}"
- for:
    test: "{{ output|list }}"
  repeat: "{{ test }}"
# - "{{ plans|list }}"
# - lan: python
#   code: |
#     for plan in plans:
#       plan["observation"] = "example"
#     id2val = { x['id']:x for x in plans}
#     result = id2val #[ x['id'] for x in plans ]