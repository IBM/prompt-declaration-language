description: ReAct pattern from Yao et al., [ICLR 2023](https://openreview.net/forum?id=WE_vluYUL-X)
defs:
  # By abstracting the pattern, the naming and formatting of the individual steps can
  # be more easily changed.
  # Example usage:
  # - call: react_block
  #   args:
  #     trajectory:
  #     - question: "When did the Battle of White Plains take place?"
  #     - thought: "I need to search Battle of White Plains, find the date it took place."
  #     - action: "Search[Battle of White Plains]"
  #     - observation: "The Battle of White Plains took place during the New York and New Jersey campaign of the American Revolutionary War on October 28, 1776, near White Plains, New York."
  #     - thought: "It's mentioned that it took place in 1776."
  #     - act: "Finish[1776]"
  react_block:
    function:
      trajectory: {list: obj}
    return:
    - for:
        trajectory: "{{ trajectory }}"
      repeat:
      - def: type
        document: "{{ trajectory.keys()|first }}"
        show_result: false
      - def: content
        document: "{{ trajectory.values()|first }}"
        show_result: false
      - if: "{{ type == 'question'}}"
        then: |
          Question: {{ content }}
      - if: "{{ type == 'thought'}}"
        then: |
          Tho: {{ content }}
      - if: "{{ type == 'action'}}"
        then: |
          Act: {{ content }}
      - if: "{{ type == 'observation'}}"
        then: |
          Obs: {{ content }}
      - if: "{{ type not in ['question', 'thought', 'action', 'observation'] }}"
        then: "{{ type }}: {{ content }}"

  default_tools: |
    import wikipedia
    match ACTION.strip():
      case 'Search':
        try:
          result = wikipedia.summary(SUBJECT)
        except wikipedia.WikipediaException as e:
          result = str(error)
      case _:
        result = "Invalid Action. Valid Actions are Search[<topic>] and Finish[<answer>]."

  react:
    function:
      question: str
      model: str
      tools: str
    return:
    - |
      Question: What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?
      Tho: I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...
      Act: Search[Colorado orogeny]
      Obs: The Colorado orogeny was an episode of mountain building (an orogeny) ...
      Tho: It does not mention the eastern sector. So I need to look up eastern sector.
      Tho: High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.
      Act: Finish[1,800 to 7,000 ft]

      Question: What profession does Nicholas Ray and Elia Kazan have in common?
      Tho: I need to search Nicholas Ray and Elia Kazan, find their professions, then find the profession they have in common.
      Act: Search[Nicholas Ray]
      Obs: Nicholas Ray (born Raymond Nicholas Kienzle Jr., August 7, 1911 - June 16, 1979) was an American film director, screenwriter, and actor best known for the 1955 film Rebel Without a Cause.
      Tho: Professions of Nicholas Ray are director, screenwriter, and actor. I need to search Elia Kazan next and find his professions.
      Act: Search[Elia Kazan]
      Obs: Elia Kazan was an American film and theatre director, producer, screenwriter and actor.
      Tho: Professions of Elia Kazan are director, producer, screenwriter, and actor. So profession Nicholas Ray and Elia Kazan have in common is director, screenwriter, and actor.
      Act: Finish[director, screenwriter, actor]

      Question: {{ question }}
    - repeat:
      - repeat:
        - def: THOUGHT
          model: "{{ model }}"
          parameters:
            decoding_method: sample
            stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
            include_stop_sequence: true
          constraints:
          - words_len: ">2"
            not_contains: Tho
        until: '{{ THOUGHT.endswith("Act:") }}'
      - def: ACTION
        model: "{{ model }}"
        parameters:
          decoding_method: sample
          stop_sequences: ["[", "\n"]
          include_stop_sequence: false
      - "["
      - def: SUBJECT
        model: "{{ model }}"
        parameters:
          decoding_method: sample
          stop_sequences: ["]", "\n"]
          include_stop_sequence: false
      - "]"
      - if: '{{ (ACTION | trim) != "Finish" }}'
        then:
        - "\nObs: "
        - lan: python
          code: "{{ tools }}"
        - model: "{{ model }}"
          parameters:
            decoding_method: sample
            stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
            include_stop_sequence: false
      until: '{{ (ACTION | trim) == "Finish" }}'