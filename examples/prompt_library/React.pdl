description: ReAct pattern from Yao et al., [ICLR 2023](https://openreview.net/forum?id=WE_vluYUL-X)
# See alternative implementation here: https://smith.langchain.com/hub/hwchase17/react-chat
defs:
  langchain: |
    Answer the following questions as best you can. You have access to the following tools:

    {tools}

    Use the following format:

    Question: the input question you must answer
    Thought: you should always think about what to do
    Action: the action to take, should be one of [{tool_names}]
    Action Input: the input to the action
    Observation: the result of the action
    ... (this Thought/Action/Action Input/Observation can repeat N times)
    Thought: I now know the final answer
    Final Answer: the final answer to the original input question

    Begin!

    Question: {input}
    Thought:{agent_scratchpad}

  langsmith: |
    Assistant is a large language model trained by OpenAI.

    Assistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.
    
    Assistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.
    
    Overall, Assistant is a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.
    
    TOOLS:
    
    ------
    
    Assistant has access to the following tools:
    
    {tools}
    
    To use a tool, please use the following format:
    
    ```
    
    Thought: Do I need to use a tool? Yes
    
    Action: the action to take, should be one of [{tool_names}]
    
    Action Input: the input to the action
    
    Observation: the result of the action
    
    ```
    
    When you have a response to say to the Human, or if you do not need to use a tool, you MUST use the format:
    
    ```
    
    Thought: Do I need to use a tool? No
    
    Final Answer: [your response here]
    
    ```
    
    Begin!
    
    Previous conversation history:
    
    {chat_history}
    
    New input: {input}
    
    {agent_scratchpad}
  # By abstracting the pattern, the naming and formatting of the individual steps can
  # be more easily changed.
  # Example usage:
  # - call: react_block
  #   args:
  #     trajectory:
  #     - question: "When did the Battle of White Plains take place?"
  #     - thought: "I need to search Battle of White Plains, find the date it took place."
  #     - action: "Search[Battle of White Plains]"
  #     - observation: "The Battle of White Plains took place during the New York and New Jersey campaign of the American Revolutionary War on October 28, 1776, near White Plains, New York."
  #     - thought: "It's mentioned that it took place in 1776."
  #     - act: "Finish[1776]"
  react_block:
    function:
      trajectory: {list: obj}
    return:
    - for:
        trajectory: "{{ trajectory }}"
      repeat:
      - def: type
        document: "{{ trajectory.keys()|first }}"
        show_result: false
      - def: content
        document: "{{ trajectory.values()|first }}"
        show_result: false
      - if: "{{ type == 'question'}}"
        then: |
          Question: {{ content }}
      - if: "{{ type == 'thought'}}"
        then: |
          Tho: {{ content }}
      - if: "{{ type == 'action'}}"
        then: |
          Act: {{ content }}
      - if: "{{ type == 'observation'}}"
        then: |
          Obs: {{ content }}
      - if: "{{ type not in ['question', 'thought', 'action', 'observation'] }}"
        then: "{{ type }}: {{ content }}"

  load_tools:
    data:
    - name: test
    - name: test

  describe_tools:
    function:
      tools: {list: obj}
    return:
      - for:
          tool: "{{ tools }}" 
        repeat: |
          {{ tool.name }}: {{ tool.description }}

  default_tools: |
    import wikipedia
    match ACTION.strip():
      case 'Search':
        try:
          result = wikipedia.summary(SUBJECT)
        except wikipedia.WikipediaException as e:
          result = str(error)
      case _:
        result = "Invalid Action. Valid Actions are Search[<topic>] and Finish[<answer>]."
  tool:
    function:
      name: str
      description: str
      parameters: obj
      example: str
    return: |
      {
          "name": "{{ name }}",
          "description": "{{ description }}",
          "parameters": {
              {{ parameters }}
              "type": "object",
              "properties": {
                  "location": {
                      "type": "string",
                      "description": "The city and state, e.g. San Francisco, CA"
                  }
              },
              "required": ["location"]
          },
          "example": {{ example }}
      }

  react:
    function:
      question: str
      model: str
      tools: str
    return:
    - call: react_block
      args:
        trajectory:
        - question: "What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?"
        - thought: "I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ..."
        - action: "Search[Colorado orogeny]"
        - observation: "The Colorado orogeny was an episode of mountain building (an orogeny) ..."
        - thought: "High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft."
        - action: "Finish[1,800 to 7,000 ft]"
    - "\n\n"
    - call: react_block
      args:
        trajectory:
        - question: "What profession does Nicholas Ray and Elia Kazan have in common?"
        - thought: "I need to search Nicholas Ray and Elia Kazan, find their professions, then find the profession they have in common."
        - action: "Search[Nicholas Ray]"
        - observation: "Nicholas Ray (born Raymond Nicholas Kienzle Jr., August 7, 1911 - June 16, 1979) was an American film director, screenwriter, and actor best known for the 1955 film Rebel Without a Cause."
        - thought: "Professions of Nicholas Ray are director, screenwriter, and actor. I need to search Elia Kazan next and find his professions."
        - action: "Search[Elia Kazan]"
        - observation: "Elia Kazan was an American film and theatre director, producer, screenwriter and actor."
        - thought: "Professions of Elia Kazan are director, producer, screenwriter, and actor. So profession Nicholas Ray and Elia Kazan have in common is director, screenwriter, and actor."
        - action: "Finish[director, screenwriter, actor]"
    - "Question: {{ question }}"
    - repeat:
      - repeat:
        - def: THOUGHT
          model: "{{ model }}"
          parameters:
            decoding_method: sample
            stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
            include_stop_sequence: true
          constraints:
          - words_len: ">2"
            not_contains: Tho
        until: '{{ THOUGHT.endswith("Act:") }}'
      - def: ACTION
        model: "{{ model }}"
        parameters:
          decoding_method: sample
          stop_sequences: ["[", "\n"]
          include_stop_sequence: false
      - "["
      - def: SUBJECT
        model: "{{ model }}"
        parameters:
          decoding_method: sample
          stop_sequences: ["]", "\n"]
          include_stop_sequence: false
      - "]"
      - if: '{{ (ACTION | trim) != "Finish" }}'
        then:
        - "\nObs: "
        - call: "{{ ACTION }}"
          args:
            subject: "{{ SUBJECT }}"
        - model: "{{ model }}"
          parameters:
            decoding_method: sample
            stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
            include_stop_sequence: false
      until: '{{ (ACTION | trim) == "Finish" }}'
document:
- "{{ load_tools }}"
# - "You have access to the following tools:\n"
# - call: describe_tools
#   args:
#     tools: "{{ load_tools  }}"
# - |
#   You can use the tools by outputing the tool name followed by its arguments in square brackets, delimited by commas. You should begin your tool invocation with 'Act:'. Example: 'Action: tool_name[argument_1]' You can only invoke one tool at a time.
# - "{{ load_tools }}"
# - call: react
#   args:
#     question: "Who are you?"
#     model: ""
#     tools: ""
# - call: tool
#   args:
#     name: "get_current_weather"
#     description: "Get the current weather"
#     parameters:
#       type: object
#       properties:
#         location:
#           type: string
#           description: The city and state, e.g. San Francisco, CA
#       required:
#       - location
#     example: hello world!