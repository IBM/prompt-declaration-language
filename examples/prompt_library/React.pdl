description: ReAct pattern from Yao et al., [ICLR 2023](https://openreview.net/forum?id=WE_vluYUL-X)
# See alternative implementation here: https://smith.langchain.com/hub/hwchase17/react-chat
defs:
  react_block:
    function:
      trajectory: { list: obj }
    return:
      - for:
          trajectory: "{{ trajectory }}"
        repeat:
          - def: type
            document: "{{ trajectory.keys()|first }}"
            show_result: false
          - def: content
            document: "{{ trajectory.values()|first }}"
            show_result: false
          - if: "{{ type == 'question'}}"
            then: |
              Question: {{ content }}
          - if: "{{ type == 'thought'}}"
            then: |
              Tho: {{ content }}
          - if: "{{ type == 'action'}}"
            then: |
              Act: {{ content }}
          - if: "{{ type == 'observation'}}"
            then: |
              Obs: {{ content }}
          - if: "{{ type not in ['question', 'thought', 'action', 'observation'] }}"
            then: "{{ type }}: {{ content }}"
      - "\n"

  Search:
    function:
      subject: str
    return:
      - "[Document]\n"
      - lan: python
        code: |
          import wikipedia
          try:
            result = wikipedia.summary(subject)
          except wikipedia.WikipediaException as e:
            result = str(e)
      - "\n[End]\n"

  get_current_weather:
    function:
      subject: str
    return:
      - api: https
        url: https://api.weatherapi.com/v1/current.json?key=cf601276764642cb96224947230712&q=
        input: '{{ subject }}'
        show_result: false

  default_tools:
    data:
      - name: get_current_weather
        description: Get the current weather
        parameters:
          - name: location
            type: string
            description: The city and state, e.g. San Francisco, CA
        examples:
          - - question: "What is the weather in London?"
            - action: "get_current_weather[London]"
            - observation: |
                {"location":{"name":"London","region":"City of London, Greater London","country":"United Kingdom","lat":51.52,"lon":-0.11,"tz_id":"Europe/London","localtime_epoch":1722262564,"localtime":"2024-07-29 15:16"},"current":{"last_updated_epoch":1722262500,"last_updated":"2024-07-29 15:15","temp_c":27.9,"temp_f":82.2,"is_day":1,"condition":{"text":"Sunny","icon":"//cdn.weatherapi.com/weather/64x64/day/113.png","code":1000},"wind_mph":8.1,"wind_kph":13.0,"wind_degree":133,"wind_dir":"SE","pressure_mb":1019.0,"pressure_in":30.09,"precip_mm":0.0,"precip_in":0.0,"humidity":33,"cloud":6,"feelslike_c":27.2,"feelslike_f":80.9,"windchill_c":27.9,"windchill_f":82.2,"heatindex_c":27.2,"heatindex_f":80.9,"dewpoint_c":10.3,"dewpoint_f":50.5,"vis_km":10.0,"vis_miles":6.0,"uv":7.0,"gust_mph":9.3,"gust_kph":14.9}}
            - action: "Finish[The weather in London is 82.2f and sunny.]"
      - name: Search
        description: Search Wikipedia for a summary
        parameters:
          - name: query
            type: string
            description: The topic of interest
        examples:
          - - question: "What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?"
            - thought: "I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ..."
            - action: "Search[Colorado orogeny]"
            - observation: "The Colorado orogeny was an episode of mountain building (an orogeny) ..."
            - thought: "High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft."
            - action: "Finish[1,800 to 7,000 ft]"
          - - question: "What profession does Nicholas Ray and Elia Kazan have in common?"
            - thought: "I need to search Nicholas Ray and Elia Kazan, find their professions, then find the profession they have in common."
            - action: "Search[Nicholas Ray]"
            - observation: "Nicholas Ray (born Raymond Nicholas Kienzle Jr., August 7, 1911 - June 16, 1979) was an American film director, screenwriter, and actor best known for the 1955 film Rebel Without a Cause."
            - thought: "Professions of Nicholas Ray are director, screenwriter, and actor. I need to search Elia Kazan next and find his professions."
            - action: "Search[Elia Kazan]"
            - observation: "Elia Kazan was an American film and theatre director, producer, screenwriter and actor."
            - thought: "Professions of Elia Kazan are director, producer, screenwriter, and actor. So profession Nicholas Ray and Elia Kazan have in common is director, screenwriter, and actor."
            - action: "Finish[director, screenwriter, actor]"

  filter_tools_by_name:
    function:
      tools: {list: obj}
      tool_names: {list: str}
    return:
      data: "{{ tools|selectattr('name', 'in', tool_names)|list }}"

  demonstrate_tools:
    function:
      tools: { list: obj }
    return:
      for:
        tool: "{{ tools }}"
      repeat:
        for:
          example: "{{ tool.examples }}"
        repeat:
          call: react_block
          args:
            trajectory: "{{ example }}"

  list_tools:
    function:
      tools: { list: obj }
    return:
      - def: signatures
        show_result: false
        for:
          tool: "{{ tools }}"
        repeat: "{{ tool.name }}[<{{ tool.parameters|join('>, <', attribute='name') }}>]"
      - def: typed_signatures
        show_result: false
        for:
          tool: "{{ tools }}"
        repeat:
          - def: params
            show_result: false
            for:
             param: "{{ tool.parameters }}"
            repeat: "{{ param.name}}: {{ param.type }}"
          - "{{ tool.name }}({{ params|join(', ') }})"
      - data:
          names: "{{ tools|map(attribute='name')|list }}"
          signatures: "{{ signatures }}"
          typed_signatures: "{{ typed_signatures }}"
          descriptions: "{{ tools|map(attribute='description')|list }}"

  react:
    function:
      question: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      - def: TOOL_INFO
        call: list_tools
        show_result: false
        args:
          tools: "{{ tools }}"
      - "Available tools:\n"
      - for:
          name: "{{ TOOL_INFO.names }}"
          sig: "{{ TOOL_INFO.signatures }}"
          desc: "{{ TOOL_INFO.descriptions }}"
        repeat: |
          {{ name }}: {{ desc }}
      - "Finish: Respond with the Answer\n"
      - "\n"
      - call: demonstrate_tools
        args:
          tools: "{{ tools }}"
      - for:
          traj: "{{ trajectories }}"
        repeat:
          call: react_block
          args:
            trajectory: "{{ traj }}"
      - "Question: {{ question }}\nTho:"
      - repeat:
          - repeat:
              - def: THOUGHT
                model: "{{ model }}"
                parameters:
                  decoding_method: sample
                  temperature: 0.7
                  stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                  include_stop_sequence: true
            until: "{{ THOUGHT.endswith('Act:') }}"
          - def: action_raw
            model: "{{ model }}"
            parameters:
              decoding_method: sample
              temperature: 0.7
              stop_sequences: ["[", "\n"]
              include_stop_sequence: false
          - def: ACTION
            show_result: false
            document: "{{ action_raw|trim }}"
          - "["
          - def: SUBJECT
            model: "{{ model }}"
            parameters:
              decoding_method: sample
              temperature: 0.7
              stop_sequences: ["]", "\n"]
              include_stop_sequence: false
          - "]"
          - if: "{{ ACTION != 'Finish' }}"
            then:
              - "\nObs: "
              - if: "{{ ACTION in TOOL_INFO.names }}"
                then:
                  - call: "{{ ACTION }}"
                    args:
                      subject: "{{ SUBJECT }}"
                  - model: "{{ model }}"
                    parameters:
                      decoding_method: sample
                      repetition_penalty: 1.1
                      temperature: 0.7
                      stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                      include_stop_sequence: false
                else: "Invalid action. Valid actions are {{ TOOL_INFO.signatures|join(', ') }} and Finish[<answer>]."
        until: "{{ ACTION == 'Finish' }}"
      - "\n\nJSON Output: "
      - data:
          answer: "{{ SUBJECT }}"