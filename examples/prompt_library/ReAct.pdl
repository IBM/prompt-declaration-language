description: ReAct pattern from Yao et al., [ICLR 2023](https://openreview.net/forum?id=WE_vluYUL-X)
# See alternative implementation here: https://smith.langchain.com/hub/hwchase17/react-chat
defs:
  react_block:
    function:
      trajectory: { list: obj }
    return:
      - for:
          trajectory: "{{ trajectory }}"
        repeat:
          - defs:
              type: "{{ trajectory.keys()|first }}"
          - if: "{{ type == 'question'}}"
            then: |
              Question: {{ trajectory[type]|trim }}
          - if: "{{ type == 'task'}}"
            then: |
              Task: {{ trajectory[type]|trim }}
          - if: "{{ type == 'thought'}}"
            then: |
              Tho: {{ trajectory[type]|trim }}
          - if: "{{ type == 'action'}}"
            then: |
              Act: {{ trajectory[type]|trim }}
          - if: "{{ type == 'observation'}}"
            then: |
              Obs: {{ trajectory[type]|trim }}
          - if: "{{ type not in ['question', 'task', 'thought', 'action', 'observation'] }}"
            then: "{{ type }}: {{ trajectory[type]|trim }}"
      - "\n"

  finish_action:
    data:
      display_name: Finish
      pdl_function: 
      description: Respond with the Answer
      parameters:
        - name: answer
          type: string
          description: The answer
      examples: []

  demonstrate_tools:
    function:
      tools: { list: obj }
    return:
      for:
        tool: "{{ tools }}"
      repeat:
        for:
          example: "{{ tool.examples }}"
        repeat:
          call: react_block
          args:
            trajectory: "{{ example }}"

  react:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: "{{ tools.append(finish_action) or tools }}"
      - "Available tools:\n"
      - for:
          name: "{{ TOOL_INFO.display_names }}"
          sig: "{{ TOOL_INFO.signatures }}"
          desc: "{{ TOOL_INFO.descriptions }}"
        repeat: |
          {{ name }}: {{ desc }}
      - "\n"
      - call: demonstrate_tools
        args:
          tools: "{{ tools }}"
      - for:
          traj: "{{ trajectories }}"
        repeat:
          call: react_block
          args:
            trajectory: "{{ traj }}"
      - "{{ task }}\nTho:"
      - defs:
          temperature: 0.7
          iterations: 0
        repeat:
          - repeat:
              - defs:
                  iterations: "{{ iterations+1 }}"
              - def: THOUGHT
                model: "{{ model }}"
                parameters:
                  time_limit: 60000
                  random_seed: 42
                  truncate_input_tokens: 8191
                  decoding_method: sample
                  repetition_penalty: 1.1
                  temperature: "{{ temperature }}"
                  stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                  include_stop_sequence: true
            until: "{{ THOUGHT.endswith('Act:') or iterations>20 }}"
          - def: action_raw
            model: "{{ model }}"
            parameters:
              time_limit: 60000
              random_seed: 42
              truncate_input_tokens: 8191
              decoding_method: sample
              repetition_penalty: 1.1
              temperature: "{{ temperature }}"
              stop_sequences: ["[", "\n"]
              include_stop_sequence: false
          - defs:
              ACTION: "{{ action_raw|trim }}"
          - "["
          - def: SUBJECT
            model: "{{ model }}"
            parameters:
              time_limit: 60000
              random_seed: 42
              truncate_input_tokens: 8191
              decoding_method: sample
              repetition_penalty: 1.1
              temperature: "{{ temperature }}"
              stop_sequences: ["]", "\n"]
              include_stop_sequence: false
          - "]"
          - if: "{{ ACTION != 'Finish' }}"
            then:
              - "\nObs: "
              - if: "{{ ACTION in TOOL_INFO.display_names }}"
                then:
                  - call: "{{ TOOL_INFO.name_map[ACTION] }}"
                    args:
                      subject: "{{ SUBJECT }}"
                  - "\nTho:"
                  - model: "{{ model }}"
                    fallback: "Error calling model"
                    parameters:
                      time_limit: 60000
                      random_seed: 42
                      truncate_input_tokens: 8191
                      repetition_penalty: 1.1
                      decoding_method: sample
                      temperature: "{{ temperature }}"
                      stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                      include_stop_sequence: false
                else: "Invalid action. Valid actions are {{ TOOL_INFO.signatures|join(', ') }} and Finish[<answer>]."
        until: "{{ ACTION == 'Finish' or iterations>20 }}"
      - show_result: true
        data:
          answer: "{{ SUBJECT|trim }}"

  react_json:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: "{{ tools.append(finish_action) or tools }}"
      - "Available tools:\n" # The preprompt!
      - for:
          name: "{{ TOOL_INFO.display_names }}"
          sig: "{{ TOOL_INFO.signatures }}"
          desc: "{{ TOOL_INFO.descriptions }}"
        repeat: |
          {{ name }}: {{ desc }}
      - "\n"
      - call: demonstrate_tools
        args:
          tools: "{{ tools }}"
      - for:
          traj: "{{ trajectories }}"
        repeat:
          call: react_block
          args:
            trajectory: "{{ traj }}"
      - "{{ task }}\nTho:"
      - defs:
          temperature: 0.05
          decoding_method: "greedy"
        repeat:
          - repeat:
              - def: THOUGHT
                model: "{{ model }}"
                parameters:
                  decoding_method: "{{ decoding_method }}"
                  temperature: "{{ temperature }}"
                  stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                  include_stop_sequence: true
            until: "{{ THOUGHT.endswith('Act:') }}"
          - def: action
            model: "{{ model }}"
            parser: json
            spec: {name: str, arguments: obj}
            parameters:
              decoding_method: "{{ decoding_method }}"
              temperature: "{{ temperature }}"
              stop_sequences: ["\n", "<|endoftext|>"]
              include_stop_sequence: false
          - if: "{{ action.name != 'Finish' }}"
            then:
              - "\nObs: "
              - if: "{{ action.name in TOOL_INFO.display_names }}"
                then:
                  - call: "{{ TOOL_INFO.name_map[action.name] }}"
                    args:
                      arguments: "{{ action.arguments }}"
                  - model: "{{ model }}"
                    parameters:
                      decoding_method: "{{ decoding_method }}"
                      temperature: "{{ temperature }}"
                      stop_sequences: ["\n", "Act:", "Obs:", "Tho:"]
                      include_stop_sequence: false
                else: "Invalid action. Valid actions are {{ TOOL_INFO.signatures|join(', ') }} and Finish[<answer>]."
        until: "{{ action.name == 'Finish' }}"
      - show_result: false
        data:
          answer: "{{ action.arguments }}"
