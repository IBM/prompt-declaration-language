description: ReAct pattern from Yao et al., [ICLR 2023](https://openreview.net/forum?id=WE_vluYUL-X)
# See alternative implementation here: https://smith.langchain.com/hub/hwchase17/react-chat
defs:
  react_block:
    function:
      trajectory: { list: obj }
    return:
      - for:
          trajectory: ${ trajectory }
        repeat:
          - defs:
              type: ${ trajectory.keys()|first }
          - if: ${ type == 'question'}
            then: |
              Question: ${ trajectory[type]|trim }
          - if: ${ type == 'task'}
            then: |
              Task: ${ trajectory[type]|trim }
          - if: ${ type == 'thought'}
            then: |
              Tho: ${ trajectory[type]|trim }
          - if: ${ type == 'action'}
            then: |
              Act: ${ trajectory[type]|trim }
          - if: ${ type == 'observation'}
            then: |
              Obs: ${ trajectory[type]|trim }
          - if: ${ type not in ['question', 'task', 'thought', 'action', 'observation'] }
            then: "${ type }: ${ trajectory[type]|trim }"
      - "\n"

  react_code_block:
    function:
      trajectory: { list: obj }
    return:
      - for:
          trajectory: ${ trajectory }
        repeat:
          - defs:
              type: ${ trajectory.keys()|first }
          - if: ${ type == 'task'}
            then: |
              Task:
              ${ trajectory[type]|trim }
          - if: ${ type == 'thought'}
            then:
              text:
                - "\n"
                - |
                  Assistant:
                  <thought> ${ trajectory[type]|trim } </thought>
          - if: ${ type == 'action'}
            then: |
              <execute>
              ${ trajectory[type]|trim }
              </execute>
          - if: ${ type == 'observation'}
            then:
              text:
                - "\n"
                - |
                  Observation:
                  ${ trajectory[type]|trim }
          - if: ${ type == 'solution'}
            then: |-
              <solution>
              ${ trajectory[type]|trim }
              </solution>
          - if: ${ type not in ['question', 'task', 'thought', 'action', 'observation', 'solution'] }
            then: "${ type }: ${ trajectory[type]|trim }"
      - "\n"

  finish_action:
    data:
      display_name: Finish
      pdl_function:
      description: Respond with the Answer
      parameters:
        - name: answer
          type: string
          description: The answer
      examples: []

  demonstrate_tools:
    function:
      tools: { list: obj }
    return:
      for:
        tool: ${ tools }
      repeat:
        for:
          example: ${ tool.examples }
        repeat:
          call: react_block
          args:
            trajectory: ${ example }

  react:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      # text:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: ${ tools.append(finish_action) or tools }
      - "Available tools:\n"
      - for:
          name: ${ TOOL_INFO.display_names }
          sig: ${ TOOL_INFO.signatures }
          desc: ${ TOOL_INFO.descriptions }
        repeat: "${ name }: ${ desc }\n"
        # join:
        # with: "\n"
      # - "\n"
      - call: demonstrate_tools
        args:
          tools: ${ tools }
      - "\n"
      - for:
          traj: ${ trajectories }
        repeat:
          call: react_block
          args:
            trajectory: ${ traj }
      - ${ task }
      - "\n"
      - def: prev_action
        contribute: []
        data: none
      - def: exit
        contribute: []
        data: False
      - repeat:
          text:
            - def: thought
              model: ${ model }
              role: user
              parameters:
                stop:
                  - "Act:"
                max_tokens: 256
                include_stop_sequence: true
                final_prompt_value: ""
                roles:
                  system:
                    pre_message: ""
                    post_message: ""
                  user:
                    pre_message: ""
                    post_message: ""
                  assistant:
                    pre_message: ""
                    post_message: ""
            - def: action
              model: ${ model }
              role: user
              # fallback: "Please provide valid JSON. Do not include any characters outside of the JSON object."
              parameters:
                stop:
                  - "\n"
                  - "}}"
                # include_stop_sequence: false
                max_tokens: 256
                final_prompt_value: ""
                roles:
                  system:
                    pre_message: ""
                    post_message: ""
                  user:
                    pre_message: ""
                    post_message: ""
                  assistant:
                    pre_message: ""
                    post_message: ""
              parser: json
              spec: { name: str, arguments: obj }
            - if: ${ action != prev_action }
              then:
                # ----
                - def: observation
                  if: ${ action.name != 'Finish' }
                  then:
                    text:
                      - "\nObs: "
                      - if: ${ action.name in TOOL_INFO.display_names }
                        then:
                          - call: ${ TOOL_INFO.name_map[action.name] }
                            args:
                              arguments: ${ action.arguments }
                        else: "Invalid action. Valid actions are ${ TOOL_INFO.signatures[:-1]|join(', ') }, and ${ TOOL_INFO.signatures[-1] }."
                      - "\nTho:"
              # ----
              # - def: observation
              #   if: ${ action.name == "Calc" }
              #   then:
              #     text:
              #     - "Obs: "
              #     - call: Calculator
              #       args:
              #         subject: ${ action.arguments.expr }
              #   else:
              #     - "Obs: Invalid action. Valid actions are ${ TOOL_INFO.signatures[:-1]|join(', ') }, and ${ TOOL_INFO.signatures[-1] }."
              else:
                def: exit
                contribute: []
                data: True
            - def: prev_action
              contribute: []
              data: ${ action }
        until: ${ action.name == "Finish" or exit }
      - data:
          answer: ${ (action.arguments.topic|default("No answer found."))|trim }

  reacttools:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      # text:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: ${ tools.append(finish_action) or tools }
      - "Available tools:\n"
      - role: system
        text: You are a helpful assistant with access to the following function calls. Your task is to produce a sequence of function calls necessary to generate response to the user utterance. Use the following function calls as required.
        contribute: [context]
      - role: available_tools
        text: ${ tools }
        contribute: [context]
      # - for:
      #     name: ${ TOOL_INFO.display_names }
      #     sig: ${ TOOL_INFO.signatures }
      #     desc: ${ TOOL_INFO.descriptions }
      #   repeat: "${ name }: ${ desc }\n"
      #   # join:
      #   # with: "\n"
      # # - "\n"
      # - call: demonstrate_tools
      #   args:
      #     tools: ${ tools }
      # - "\n"
      - for:
          traj: ${ trajectories }
        repeat:
          call: react_block
          args:
            trajectory: ${ traj }
      - ${ task }
      - "\n"
      - def: prev_action
        contribute: []
        data: none
      - def: exit
        contribute: []
        data: False
      - repeat:
          text:
            - def: thought
              model: ${ model }
              role: user
              parameters:
                stop:
                  - "Act:"
                max_tokens: 256
                include_stop_sequence: true
                final_prompt_value: ""
                roles:
                  system:
                    pre_message: ""
                    post_message: ""
                  user:
                    pre_message: ""
                    post_message: ""
                  assistant:
                    pre_message: ""
                    post_message: ""
            - def: actions
              model: ${ model }
              role: user
              parser: json
              spec: [{ name: str, arguments: { expr: str }}] # spec: [{ name: str, arguments: obj }]
              # fallback: "Please provide valid JSON. Do not include any characters outside of the JSON object."
              # parameters:
                # stop:
                #   - "\n"
                #   - "}}"
                # include_stop_sequence: false
                # max_tokens: 256
                # final_prompt_value: ""
                # roles:
                #   system:
                #     pre_message: ""
                #     post_message: ""
                #   user:
                #     pre_message: ""
                #     post_message: ""
                #   assistant:
                #     pre_message: ""
                #     post_message: ""

            - if: ${ action != prev_action }
              then:
                # ----
                - def: observation
                  if: ${ action.name != 'Finish' }
                  then:
                    text:
                      - "\nObs: "
                      - if: ${ action.name in TOOL_INFO.display_names }
                        then:
                          - call: ${ TOOL_INFO.name_map[action.name] }
                            args:
                              arguments: ${ action.arguments }
                        else: "Invalid action. Valid actions are ${ TOOL_INFO.signatures[:-1]|join(', ') }, and ${ TOOL_INFO.signatures[-1] }."
                      - "\nTho:"
              # ----
              # - def: observation
              #   if: ${ action.name == "Calc" }
              #   then:
              #     text:
              #     - "Obs: "
              #     - call: Calculator
              #       args:
              #         subject: ${ action.arguments.expr }
              #   else:
              #     - "Obs: Invalid action. Valid actions are ${ TOOL_INFO.signatures[:-1]|join(', ') }, and ${ TOOL_INFO.signatures[-1] }."
              else:
                def: exit
                contribute: []
                data: True
            - def: prev_action
              contribute: []
              data: ${ action }
        until: ${ action.name == "Finish" or exit }
      - data:
          answer: ${ (action.arguments.topic|default("No answer found."))|trim }

  reactold:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: ${ tools.append(finish_action) or tools }
      - "Available tools:\n"
      - for:
          name: ${ TOOL_INFO.display_names }
          sig: ${ TOOL_INFO.signatures }
          desc: ${ TOOL_INFO.descriptions }
        repeat: "${ name }: ${ desc }\n"
        # join:
        #   with: "\n"
      - "\n"
      - call: demonstrate_tools
        args:
          tools: ${ tools }
      - "\n"
      - for:
          traj: ${ trajectories }
        repeat:
          call: react_block
          args:
            trajectory: ${ traj }
      - "${ task }\nTho:"
      - defs:
          temperature: 0.7
          iterations: 0
        repeat:
          - repeat:
              - defs:
                  iterations: ${ iterations+1 }
              - def: THOUGHT
                model: ${ model }
                # role: user
                # contribute: []
                parameters:
                  max_tokens: 1024
                  time_limit: 60000
                  random_seed: 42
                  truncate_input_tokens: 8191
                  decoding_method: sample
                  repetition_penalty: 1.1
                  temperature: ${ temperature }
                  stop: ["\n", "Act:", "Obs:", "Tho:"]
                  include_stop_sequence: true
              # - def: THOUGHT
              #   text: ${ THOUGHT|trim(' ') }
              # - "${ THOUGHT }"
            until: ${ THOUGHT.endswith('Act:') or iterations>20 }
          - def: action_raw
            # role: user
            model: ${ model }
            contribute: []
            parameters:
              max_tokens: 1024
              time_limit: 60000
              random_seed: 42
              truncate_input_tokens: 8191
              decoding_method: sample
              repetition_penalty: 1.1
              temperature: ${ temperature }
              stop: ["[", "\n"]
              include_stop_sequence: false
          - defs:
              ACTION: ${ action_raw|trim }
          - " ${ ACTION }["
          # - "["
          - def: SUBJECT
            model: ${ model }
            contribute: []
            # role: user
            parameters:
              max_tokens: 1024
              time_limit: 60000
              random_seed: 42
              truncate_input_tokens: 8191
              decoding_method: sample
              repetition_penalty: 1.1
              temperature: ${ temperature }
              stop: ["]", "\n"]
              include_stop_sequence: false
          - "${ SUBJECT|trim }]"
          # - "]"
          - if: ${ ACTION != 'Finish' }
            then:
              - "\nObs: "
              - if: ${ ACTION in TOOL_INFO.display_names }
                then:
                  - call: ${ TOOL_INFO.name_map[ACTION] }
                    args:
                      subject: ${ SUBJECT }
                  - "\nTho: "
                  - model: ${ model }
                    fallback: "Error calling model"
                    # role: user
                    parameters:
                      max_tokens: 1024
                      time_limit: 60000
                      random_seed: 42
                      truncate_input_tokens: 8191
                      repetition_penalty: 1.1
                      decoding_method: sample
                      temperature: ${ temperature }
                      stop: ["\n", "Act:", "Obs:", "Tho:"]
                      include_stop_sequence: false
                else: "Invalid action. Valid actions are ${ TOOL_INFO.signatures[:-1]|join(', ') }, and ${ TOOL_INFO.signatures[-1] }."
        until: ${ ACTION == 'Finish' or iterations>20 }
      - data:
          answer: ${ SUBJECT|trim }

  react_json:
    function:
      task: str
      model: str
      tools: { list: obj }
      trajectories: { list: list }
    return:
      - defs:
          TOOL_INFO:
            call: list_tools
            args:
              tools: ${ tools.append(finish_action) or tools }
      - "Available tools:\n" # The preprompt!
      - for:
          name: ${ TOOL_INFO.display_names }
          sig: ${ TOOL_INFO.signatures }
          desc: ${ TOOL_INFO.descriptions }
        repeat: |
          ${ name }: ${ desc }
      - "\n"
      - call: demonstrate_tools
        args:
          tools: ${ tools }
      - for:
          traj: ${ trajectories }
        repeat:
          call: react_block
          args:
            trajectory: ${ traj }
      - "${ task }\nTho:"
      - defs:
          temperature: 0.05
          decoding_method: greedy
          iterations: 0
        repeat:
          - repeat:
              - defs:
                  iterations: ${ iterations+1 }
              - def: THOUGHT
                model: ${ model }
                parameters:
                  max_tokens: 1024
                  decoding_method: ${ decoding_method }
                  temperature: ${ temperature }
                  stop: ["\n", "Act:", "Obs:", "Tho:"]
                  include_stop_sequence: true
            until: ${ THOUGHT.endswith('Act:') or iterations>20 }
          - def: action
            model: ${ model }
            parser: json
            spec: { name: str, arguments: obj }
            parameters:
              max_tokens: 1024
              decoding_method: ${ decoding_method }
              temperature: ${ temperature }
              stop: ["\n", "<|endoftext|>"]
              include_stop_sequence: false
          - if: ${ action.name != 'Finish' }
            then:
              - "\nObs: "
              - if: ${ action.name in TOOL_INFO.display_names }
                then:
                  - call: ${ TOOL_INFO.name_map[action.name] }
                    args:
                      arguments: ${ action.arguments }
                  - model: ${ model }
                    parameters:
                      max_tokens: 1024
                      decoding_method: ${ decoding_method }
                      temperature: ${ temperature }
                      stop: ["\n", "Act:", "Obs:", "Tho:"]
                      include_stop_sequence: false
                else: "Invalid action. Valid actions are ${ TOOL_INFO.signatures|join(', ') } and Finish[<answer>]."
        until: ${ action.name == 'Finish' or iterations>20 }
      - data:
          answer: ${ action.arguments }
