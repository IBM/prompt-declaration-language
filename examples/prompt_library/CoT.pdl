description: CoT pattern introduced by Wei et al. (2022)
defs:
  # Chain of Thought
  question_cot:
    function:
      question: str
      reasoning: str
      answer: str
    return: |+
      Question: {{ question }}
      Answer: Let's think step by step. {{ reasoning }}
      The answer is {{ answer }}

  claim_cot:
    function:
      question: str
      reasoning: str
      answer: str
    return: |+
      Task: On June 2017, the following claim was made: {{ question }}
      Q: Was this claim true or false?
      Thought: Let's think step by step. {{ reasoning }}
      Answer: The claim is {{ answer }}

  # Auto Chain of Thought Zhang et al. (2022)
  # The idea is to use a _model_ to generate a reasoning path, even if not very accurate.
  # It is best combined with some fewshot examples
  auto_chain_of_thought:
    function:
      question: str
      model: str
      answer: str
    return:
    - |-
      Question: {{question}}

      Answer: Let's think step by step. 
    - model: "{{ model }}"
      params:
        decoding_method: "greedy"
        stop_sequences:
        - "The answer is"
        include_stop_sequence: false
    - "The answer is {{ answer }}."

  fewshot_cot:
    function:
      examples:
        { list: { obj: { question: str, reasoning: str, answer: str } } }
      block_style: str
    return:
      for:
        example: "{{ examples }}"
      repeat:
        call: "{{ block_style }}"
        args:
          question: "{{ example.question }}"
          reasoning: "{{ example.reasoning }}"
          answer: "{{ example.answer }}"

  chain_of_thought:
    function:
      question: str
      model: str
      examples:
        { list: { obj: { question: str, reasoning: str, answer: str } } }
    return:
    - call: fewshot_cot
      args:
        examples: "{{ examples }}"
    - |-
      Question: {{question}}

      Answer: Let's think step by step.
    - model: "{{ model }}"
      params:
        decoding_method: "greedy"
        stop_sequences:
        - "The answer is"
        include_stop_sequence: false
    - "The answer is "
    - def: answer
      model: "{{ model }}"
      params:
        decoding_method: "greedy"
    - "\n\nJSON Output: "
    - data:
        answer: "{{ answer|trim }}"