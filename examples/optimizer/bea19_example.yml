pdl_path: examples/optimizer/bea19.pdl # Path to the PDL file to optimize
# benchmark: gretel-math # Name our benchmark
dataset:
  train: bea19_jsonl/train.jsonl # Path to the training split in JSONL format
  test: bea19_jsonl/test.jsonl # Path to the test split in JSONL format
  validation: bea19_jsonl/validation.jsonl # Path to the validation split in JSONL format

demonstrations_variable_name: demonstrations # variable name to insert demonstrations into
demonstration_columns:
  - broken # column name for the question in the dataset
  - sentence # column name for the answer in the dataset

instance_columns:
  - broken # column name for the question in the dataset

groundtruth_column: sentence # column name for the ground truth in the dataset

eval_pdl: examples/optimizer/eval_levenshtein.pdl # Path to the PDL file for evaluation

budget: null # Set a budget, can be number of iterations, or a duration string e.g. "2h"
budget_growth: double # double validation set size each iteration
# or to_max: reach max_test_set_size by final iteration
initial_test_set_size: 1 # size of test set in first iteration
max_test_set_size: 1 # maximum test set size
num_candidates: 100 # how many candidates to evaluate
parallelism: 1 # how many threads to run evaluations across
shuffle_test: false # shuffling of test set
test_set_name: test # name of test set
train_set_name: train # name of train set
validation_set_name: validation # name of validation set
variables: # define discrete options to sample from
  model: # set ${ model } variable
    - watsonx/meta-llama/llama-3-2-3b-instruct
  num_demonstrations: # overrides num demonstrations above
    - 0
    - 3
    - 5