{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#prompt-description-language","title":"Prompt Declaration Language","text":"<p>LLMs will continue to change the way we build software systems. They are not only useful as coding assistants, providing snipets of code, explanations, and code transformations, but they can also help replace components that could only previously be achieved with rule-based systems. Whether LLMs are used as coding assistants or software components, reliability remains an important concern. LLMs have a textual interface and the structure of useful prompts is not captured formally. Programming frameworks do not enforce or validate such structures since they are not specified in a machine-consumable way. The purpose of the Prompt Declaration Language (PDL) is to allow developers to specify the structure of prompts and to enforce it, while providing a unified programming framework for composing LLMs with rule-based systems. </p> <p>PDL is based on the premise that interactions between users, LLMs and rule-based systems form a document. Consider for example the interactions between a user and a chatbot. At each interaction, the exchanges form a document that gets longer and longer. Similarly, chaining models together or using tools for specific tasks result in outputs that together form a document. PDL allows users to specify the shape and contents of such documents in a declarative way (in YAML or JSON), and is agnostic of any programming language. Because of its document-oriented nature, it can be used to easily express a variety of data generation tasks (inference, data synthesis, data generation for model training, etc...). Moreover, PDL programs themselves are structured data (YAML) as opposed to traditional code, so they make good targets for LLM generation as well.</p> <p>PDL provides the following features: - Ability to templatize not only prompts for one LLM call, but also composition of LLMs with tools (code and APIs). Templates can encompass tasks of larger granularity than a single LLM call (unlike many prompt programming languages). - Control structures: variable definitions and use, conditionals, loops, functions - Ability to read from files, including JSON data. - Ability to call out to code. At the moment only Python is supported, but this could be any other programming language in principle. - Ability to call out to REST APIS.</p> <p>The PDL interpreter (<code>pdl/pdl.py</code>) takes a PDL program as input and renders it into a document by execution its instructions (calling out to models, code, apis, etc...). </p> <p>See below for installation notes, followed by an overview of the language. A more detailed description of the language features can be found in this tutorial.</p>"},{"location":"#demo-video","title":"Demo Video","text":""},{"location":"#interpreter-installation","title":"Interpreter Installation","text":"<p>The interpreter has been tested with Python version 3.12.</p> <p>To install the requirements for <code>pdl</code>, execute the command:</p> <pre><code>pip3 install .\n</code></pre> <p>To install the dependencies for development of PDL and execute all the example, execute the command: <pre><code>pip3 install '.[all]'\n</code></pre></p> <p>In order to run the examples that use foundation models hosted on watsonx, you need an account (a free plan is available) and set up the following environment variables: - <code>WATSONX_API</code>, the API url (set to <code>https://{region}.ml.cloud.ibm.com</code>) - <code>WATSONX_KEY</code>, the API key (see information on key creation) - <code>WATSONX_PROJECT_ID</code>, the project hosting the resources (see information about project creation and finding project ID).</p> <p>Internal IBM users can use models hosted on BAM. You need to set up 2 environment variables: - <code>GENAI_API</code> set to <code>https://bam-api.res.ibm.com/</code> - <code>GENAI_KEY</code> set to your BAM API key. To obtain your key, go to the BAM main page. On the right and under the \"Documentation\" section, you will see a button to copy your API key.</p> <p>To run the interpreter:</p> <pre><code>python3 -m pdl.pdl &lt;path/to/example.pdl&gt;\n</code></pre> <p>The folder <code>examples</code> contains some examples of PDL programs. Several of these examples have been adapted from the LMQL paper by Beurer-Kellner et al. </p> <p>We highly recommend to use VSCode to edit PDL YAML files. This project has been configured so that every YAML file is associated with the PDL grammar JSONSchema (see settings and schema). This enables the editor to display error messages when the yaml deviates from the PDL syntax and grammar. It also provides code completion. You can set up your own VSCode PDL projects similarly using this settings and schema files. The PDL interpreter also provides similar error messages.</p> <p>The interpreter prints out a log by default in the file <code>log.txt</code>. This log contains the details of inputs and outputs to every block in the program. It is useful to examine this file when the program is behaving differently than expected.</p> <p>To change the log filename, you can pass it to the interpreter as follows:</p> <pre><code>python3 -m pdl.pdl --log &lt;my-logfile&gt; &lt;my-example&gt;\n</code></pre> <p>We can also pass initial data to the interpreter to populate variables used in a PDL program, as follows:</p> <pre><code>python3 -m pdl.pdl --data &lt;JSON-or-YAML-data&gt; &lt;my-example&gt;\n</code></pre> <p>This can also be done by passing a JSON or YAML file:</p> <pre><code>python3 -m pdl.pdl --data_file &lt;JSON-or-YAML-file&gt; &lt;my-example&gt;\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<p>In PDL, we can write some YAML to create a prompt and call an LLM:</p> <pre><code>description: Hello world with watsonx\ndocument:\n- Hello\n- model: ibm/granite-3b-code-instruct\n  params:\n    STOP_SEQUENCES:\n    - '!'\n</code></pre> <p>The <code>description</code> field is a description for the program. Field <code>document</code> contains a list of either strings or blocks which together form the document to be produced. In this example, the document starts with the string <code>\"Hello\"</code> followed by a block that calls out to a model. In this case, it is model with id <code>ibm/granite-3b-code-instruct</code> from watsonx, with the indicated parameter: the stop sequence is <code>!</code>. The input to the model call is everything that has been produced so far in the document (here <code>Hello</code>).</p> <p>When we execute this program using the PDL interpreter:</p> <pre><code>python3 -m pdl.pdl examples/hello/hello.pdl\n</code></pre> <p>we obtain the following document:</p> <pre><code>Hello, world!\n</code></pre> <p>where the portion <code>, world!</code> was produced by granite. In general, PDL provides blocks for calling to models, Python code, as well as APIs and makes it easy to compose them together with control structures (sequencing, conditions, loops).</p> <p>The equivalent program using a model hosted on BAM can be written as follows:</p> <pre><code>description: Hello world with BAM\ndocument:\n- Hello\n- model: ibm/granite-3b-code-instruct\n  parameters:\n    decoding_method: greedy\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n</code></pre> <p>The only difference is that the parameters of the model now follows the BAM calling convention. The <code>decoding_method</code> is <code>greedy</code> and there is a stop sequence <code>!</code> which must be included in the output.</p> <p>Consider now an example from AI for code, where we want to build a prompt template for code explanation. We have a JSON file as input containing the source code and some information regarding the repository where it came from.</p> <p>For example, given the data in this JSON file: <pre><code>{\n    \"source_code\": \"@SuppressWarnings(\\\"unchecked\\\")\\npublic static Map&lt;String, String&gt; deserializeOffsetMap(String lastSourceOffset) throws IOException {\\n  Map&lt;String, String&gt; offsetMap;\\n  if (lastSourceOffset == null || lastSourceOffset.isEmpty()) {\\n    offsetMap = new HashMap&lt;&gt;();\\n  } else {\\n    offsetMap = JSON_MAPPER.readValue(lastSourceOffset, Map.class);\\n  }\\n  return offsetMap;\\n}\",\n    \"repo_info\": {\n        \"repo\": \"streamsets/datacollector\",\n        \"path\": \"stagesupport/src/main/java/com/.../OffsetUtil.java\",\n        \"function_name\": \"OffsetUtil.deserializeOffsetMap\"\n    }\n}\n</code></pre></p> <p>we would like to express the following prompt and submit it to an LLM:</p> <pre><code>Here is some info about the location of the function in the repo.\nrepo: \nstreamsets/datacollector\npath: stagesupport/src/main/java/com/.../OffsetUtil.java\nFunction_name: OffsetUtil.deserializeOffsetMap\n\n\nExplain the following code:\n\n@SuppressWarnings(\"unchecked\")\npublic static Map&lt;String, String&gt; deserializeOffsetMap(String lastSourceOffset) throws IOException {\n  Map&lt;String, String&gt; offsetMap;\n  if (lastSourceOffset == null || lastSourceOffset.isEmpty()) {\n    offsetMap = new HashMap&lt;&gt;();\n  } else {\n    offsetMap = JSON_MAPPER.readValue(lastSourceOffset, Map.class);\n  }\n  return offsetMap;\n}\n</code></pre> <p>In PDL, this would be expressed as follows (see file):</p> <pre><code>description: Code explanation example\ndocument:\n- read: examples/code/data.json\n  parser: json\n  def: CODE\n  show_result: False\n- \"\\n{{ CODE.source_code }}\\n\"\n- model: ibm/granite-20b-code-instruct-v2\n  input:\n     |\n      Here is some info about the location of the function in the repo.\n      repo: \n      {{ CODE.repo_info.repo }}\n      path: {{ CODE.repo_info.path }}\n      Function_name: {{ CODE.repo_info.function_name }}\n\n\n      Explain the following code:\n      ```\n      {{ CODE.source_code }}```\n</code></pre> <p>The first block of the document is an input block. It reads the indicated filename (<code>examples/code/data.json</code>) and loads its contents into a variable named <code>CODE</code>. In PDL, any block can have a <code>def</code> field, which means the output of that block is assigned to that variable. Since the field <code>parser</code> is set to <code>json</code>, variable <code>CODE</code> contains that data in JSON format. The final field in the input block says that <code>show_result</code> is set to <code>false</code>, which means that the output of this block (the content that was read) is not included in the document. This feature allows the user to obtain intermediate results that are not necessarily included in the final output.</p> <p>The second block is simply a string and writes out the source code. This is done by accessing the variable <code>CODE</code>. The syntax <code>{{ var }}</code> means accessing the value of a variable in the scope. Since <code>CODE</code> contains JSON data, we can also access fields such as <code>CODE.source_code</code>.</p> <p>The third block calls a granite model. Here we explicitly provide an <code>input</code> field which means that we do not pass the entire document produced so far to the model, but only what is specified in this field. In this case, we specify our template by using the variable <code>CODE</code> as shown above.</p> <p>When we execute this program with the PDL interpreter, we obtain the following document:</p> <pre><code>@SuppressWarnings(\"unchecked\")\npublic static Map&lt;String, String&gt; deserializeOffsetMap(String lastSourceOffset) throws IOException {\n  Map&lt;String, String&gt; offsetMap;\n  if (lastSourceOffset == null || lastSourceOffset.isEmpty()) {\n    offsetMap = new HashMap&lt;&gt;();\n  } else {\n    offsetMap = JSON_MAPPER.readValue(lastSourceOffset, Map.class);\n  }\n  return offsetMap;\n}\n\nAnswer:\nThe above code is a part of the StreamSets Data Collector that deserializes an offset map from a string. The function takes in a string representing the last source offset and returns a map containing the deserialized offsets.\n\nThe @SuppressWarnings annotation is used to suppress warnings related to unchecked operations performed by the Jackson library. This is necessary because the deserializeOffsetMap function uses generics to handle different types of maps, but the Jackson library does not support generic types.\n\nThe deserializeOffsetMap function first checks if the lastSourceOffset parameter is null or empty. If it is, then a new empty map is created and returned. Otherwise, the lastSourceOffset parameter is deserialized using the Jackson library's ObjectMapper class and returned as a map.\n</code></pre> <p>Notice that in PDL variables are used to templatize any entity in the document, not just textual prompts to LLMs. We can add a block to this document to evaluate the quality of the output using a similarity metric with respect to our ground truth. See file:</p> <pre><code>description: Code explanation example\ndocument:\n- read: examples/code/data.json\n  parser: json\n  def: CODE\n  show_result: False\n- read: examples/code/ground_truth.txt\n  def: TRUTH\n  show_result: False\n- \"\\n{{ CODE.source_code }}\\n\"\n- model: ibm/granite-20b-code-instruct-v2\n  def: EXPLANATION\n  parameters:\n    decoding_method: greedy\n    max_new_tokens: 1024\n  input:\n    document:\n    - |\n      Here is some info about the location of the function in the repo.\n      repo: \n      {{ CODE.repo_info.repo }}\n      path: {{ CODE.repo_info.path }}\n      Function_name: {{ CODE.repo_info.function_name }}\n\n\n      Explain the following code:\n      ```\n      {{ CODE.source_code }}```\n- |\n\n\n  EVALUATION:\n  The similarity (Levenshtein) between this answer and the ground truth is:\n- def: EVAL\n  lan: python\n  code:\n  - |\n    import textdistance\n    expl = \"\"\"\n    {{ EXPLANATION }}\n    \"\"\"\n    truth = \"\"\"\n    {{ TRUTH }}\n    \"\"\"\n    result = textdistance.levenshtein.normalized_similarity(expl, truth)\n</code></pre> <p>This program has an input block that reads the ground truth from filename <code>examples/code/ground_truth.txt</code> and assigns its contents to variable <code>TRUTH</code>. It also assigns the output of the model to the variable <code>EXPLANATION</code>. The last block is a call to Python code, which is included after the <code>code</code> field. Notice how code is included here simply as data. We collate fragments of Python with outputs obtained from previous blocks. This is one of the powerful features of PDL: the ability to specify the execution of code that is not known ahead of time. We can use LLMs to generate code that is later executed in the same programming model. This is made possible because PDL treats code as data, like any another part of the document.</p> <p>When we execute this new program, we obtain the following:</p> <pre><code>@SuppressWarnings(\"unchecked\")\npublic static Map&lt;String, String&gt; deserializeOffsetMap(String lastSourceOffset) throws IOException {\n  Map&lt;String, String&gt; offsetMap;\n  if (lastSourceOffset == null || lastSourceOffset.isEmpty()) {\n    offsetMap = new HashMap&lt;&gt;();\n  } else {\n    offsetMap = JSON_MAPPER.readValue(lastSourceOffset, Map.class);\n  }\n  return offsetMap;\n}\n\nAnswer:\nThe above code is a part of the StreamSets Data Collector that deserializes an offset map from a string. The function takes in a string representing the last source offset and returns a map containing the deserialized offsets.\n\nThe @SuppressWarnings annotation is used to suppress warnings related to unchecked operations performed by the Jackson library. This is necessary because the deserializeOffsetMap function uses generics to handle different types of maps, but the Jackson library does not support generic types.\n\nThe deserializeOffsetMap function first checks if the lastSourceOffset parameter is null or empty. If it is, then a new empty map is created and returned. Otherwise, the lastSourceOffset parameter is deserialized using the Jackson library's ObjectMapper class and returned as a map.\n\nEVALUATION:\nThe similarity (Levenshtein) between this answer and the ground truth is:\n0.9987730061349693\n</code></pre> <p>PDL allows rapid prototyping of prompts by allowing the user to change prompts and see the effects on metrics. Try it!</p> <p>Finally, we can output JSON data as a result of this program, as follows:</p> <pre><code>description: Code explanation example\ndocument:\n- read: examples/code/data.json\n  parser: json\n  def: CODE\n  show_result: False\n- read: examples/code/ground_truth.txt\n  def: TRUTH\n  show_result: False\n- model: ibm/granite-20b-code-instruct-v2\n  def: EXPLANATION\n  show_result: False\n  parameters:\n    decoding_method: greedy\n    max_new_tokens: 1024\n  input:\n     |\n      Here is some info about the location of the function in the repo.\n      repo: \n      {{ CODE.repo_info.repo }}\n      path: {{ CODE.repo_info.path }}\n      Function_name: {{ CODE.repo_info.function_name }}\n\n\n      Explain the following code:\n      ```\n      {{ CODE.source_code }}```\n- def: EVAL\n  show_result: False\n  lan: python\n  code:\n    |\n    import textdistance\n    expl = \"\"\"\n    {{ EXPLANATION }}\n    \"\"\"\n    truth = \"\"\"\n    {{ TRUTH }}\n    \"\"\"\n    result = textdistance.levenshtein.normalized_similarity(expl, truth)\n- data:\n    input: \"{{ CODE }}\"\n    output: \"{{ EXPLANATION }}\"\n    metric: \"{{ EVAL }}\"\n</code></pre> <p>The data block takes various variables and combines their values into a JSON object with fields <code>input</code>, <code>output</code>, and <code>metric</code>. We mute the output of all the other blocks with <code>show_result</code> set to <code>false</code>. The output of this program is the corresponding serialized JSON object, with the appropriate treatment of quotation marks. Such PDL programs can be bootstrapped in a bash or Python script to create data en masse.</p>"},{"location":"#pdl-language-tutorial","title":"PDL Language Tutorial","text":"<p>See PDL Language Tutorial</p>"},{"location":"#additional-notes-and-future-work","title":"Additional Notes and Future Work","text":"<ul> <li>Currently, model blocks support the text generation interface of BAM, with the exception that we provide some default values when the following parameters are missing:</li> <li><code>decoding_method</code>: <code>greedy</code></li> <li><code>max_new_tokens</code>: 1024</li> <li><code>min_new_tokens</code>: 1</li> <li><code>repetition_penalty</code>: 1.05</li> </ul> <p>Also if the <code>decoding_method</code> is <code>sample</code>, then the following defaults are used:   - <code>temperature</code>: 0.7   - <code>top_p</code>: 0.85   - <code>top_k</code>: 50</p> <ul> <li>Only simple GETs are supported for API calls currently (see example: <code>examples/hello/weather.json</code>). We plan to more fully support API calls in the future.</li> </ul> <p>For a complete list of issues see here.</p>"},{"location":"#contributing-to-the-project","title":"Contributing to the Project","text":"<p>See Contributing to PDL</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This page documents the PDL members that likely to be used to run PDL programs from Python.</p>"},{"location":"api_reference/#interpreter","title":"Interpreter","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>pdl/pdl_interpreter.py</code> <pre><code>class InterpreterState(BaseModel):\n    yield_output: bool = True\n    log: list[str] = []\n    batch: int = 0\n    # batch=0: streaming\n    # batch=1: call to generate with `input`\n\n    def with_yield_output(self: \"InterpreterState\", b: bool) -&gt; \"InterpreterState\":\n        return self.model_copy(update={\"yield_output\": b})\n</code></pre> Source code in <code>pdl/pdl_interpreter.py</code> <pre><code>def process_prog(\n    state: InterpreterState,\n    initial_scope: ScopeType,\n    prog: Program,\n    loc=empty_block_location,\n) -&gt; tuple[Any, str, ScopeType, BlockType]:\n    scope: ScopeType = empty_scope | initial_scope\n    doc_generator = step_block(state, scope, block=prog.root, loc=loc)\n    for result, document, scope, trace in schedule([doc_generator]):\n        return result, document, scope, trace\n    assert False\n</code></pre>"},{"location":"api_reference/#pdl.pdl_interpreter.InterpreterState.batch","title":"<code>batch: int = 0</code>","text":""},{"location":"api_reference/#pdl.pdl_interpreter.InterpreterState.log","title":"<code>log: list[str] = []</code>","text":""},{"location":"api_reference/#pdl.pdl_interpreter.InterpreterState.yield_output","title":"<code>yield_output: bool = True</code>","text":""},{"location":"api_reference/#pdl.pdl_interpreter.InterpreterState.with_yield_output","title":"<code>with_yield_output(b)</code>","text":"Source code in <code>pdl/pdl_interpreter.py</code> <pre><code>def with_yield_output(self: \"InterpreterState\", b: bool) -&gt; \"InterpreterState\":\n    return self.model_copy(update={\"yield_output\": b})\n</code></pre>"},{"location":"api_reference/#program","title":"Program","text":"<p>               Bases: <code>RootModel</code></p> <p>Prompt Declaration Program (PDL)</p> Source code in <code>pdl/pdl_ast.py</code> <pre><code>class Program(RootModel):\n    \"\"\"\n    Prompt Declaration Program (PDL)\n    \"\"\"\n\n    # root: dict[str, BlockType]\n    root: BlockType\n</code></pre>"},{"location":"api_reference/#pdl.pdl_ast.Program.root","title":"<code>root: BlockType</code>","text":""},{"location":"contrib/","title":"Contributing to PDL","text":"<p>You can report issues or open a pull request (PR) to suggest changes. </p>"},{"location":"contrib/#reporting-an-issue","title":"Reporting an issue","text":"<p>To report an issue, or to suggest an idea for a change that you haven't had time to write-up yet: 1.  Review existing issues to see if a similar issue has been opened or discussed. 2.  Open an issue. Be sure to include any helpful information, such as your Kubernetes environment details, error messages, or logs that you might have.</p>"},{"location":"contrib/#suggesting-a-change","title":"Suggesting a change","text":"<p>To suggest a change to this repository, submit a pull request with the complete set of changes that you want to suggest. Before creating a PR, make sure that your changes pass all of the tests.</p> <p>The test suite can be executed with the following command in the top-level folder: <pre><code>pytest\n</code></pre></p> <p>Also, please make sure that your changes pass static checks such as code styles by executing the following command: <pre><code>pre-commit run --all-files\n</code></pre></p>"},{"location":"tutorial/","title":"PDL Language Tutorial","text":"<p>The following sections give a step-by-step overview of PDL language features. All the examples in this tutorial can be found in <code>examples/</code>.</p>"},{"location":"tutorial/#simple-document","title":"Simple document","text":"<p>The simplest PDL program is one that generates a small document (file):</p> <pre><code>description: Hello world!\ndocument:\n    Hello, world!\n</code></pre> <p>This program has a <code>description</code> field, which contains a title. It also has a <code>document</code> field, which can be either a string, a block, or a list of strings and blocks. A block is a recipe for how to obtain data (e.g., model call, code call, etc...). In this case, there are no calls to an LLM or other tools, and <code>document</code> consists of a simple string.</p> <p>To render the program into an actual document, we have a PDL interpreter that can be invoked as follows:</p> <pre><code>python3 -m pdl.pdl ./examples/hello/hello.pdl\n</code></pre> <p>This results in the following output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"tutorial/#calling-an-llm","title":"Calling an LLM","text":"<pre><code>description: Hello world calling a model\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  parameters:\n    decoding_method: greedy\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n</code></pre> <p>In this program (file), the <code>document</code> starts with the word <code>Hello,</code>, and we call a model (<code>ibm/granite-20b-code-instruct-v2</code>) with this as input prompt.  The model is passed some parameters including the <code>decoding_method</code> and <code>stop_sequences</code>, which are to be included in the output. Since the <code>input</code> field is not specified in the model call, the entire document up that point is passed to the model as input context. </p> <p>In general, a model call accepts the same parameters as BAM's text generation interface, with the exception that we provide some default values when the following parameters are missing:   - <code>decoding_method</code>: <code>greedy</code>   - <code>max_new_tokens</code>: 1024   - <code>min_new_tokens</code>: 1   - <code>repetition_penalty</code>: 1.07</p> <p>Also if the <code>decoding_method</code> is <code>sample</code>, then the following defaults are used:   - <code>temperature</code>: 0.7   - <code>top_p</code>: 0.85   - <code>top_k</code>: 50</p> <p>The user can override these defaults by explicitly including them in the model call.</p> <p>When we execute this program using the interpreter, we obtain:</p> <pre><code>Hello, world!\n</code></pre> <p>where the portion <code>world!</code> has been generated by Granite.</p> <p>Here's another of model call that includes an <code>input</code> field: <pre><code>description: Hello world calling a model\ndocument:\n- \"Hello, \"\n- model: ibm/granite-20b-multilingual\n  input: \n    Translate 'the world' to French\n  parameters:\n    decoding_method: greedy\n</code></pre></p> <p>In this case, we make a call to a falcon model, and the input passed to the model is the sentence: <code>Translate 'the world' to French</code> and nothing else from the surrounding document. When we execute this program, we obtain:</p> <pre><code>Hello, Le monde\n</code></pre>"},{"location":"tutorial/#strings","title":"Strings","text":"<p>Multiline strings are commonly used when writing PDL programs. However, their exact semantics are not intuitive. There are two types of formats that YAML supports for strings: block scalar and flow scalar formats. Scalars are what YAML calls basic values like numbers or strings, as opposed to complex types like arrays or objects. Block scalars have more control over how they are interpreted, whereas flow scalars have more limited escaping support. (Explanation here is thanks to Wolfgang Faust)</p>"},{"location":"tutorial/#block-scalars","title":"Block Scalars","text":"<p>Block Style Indicator: The block style indicates how newlines inside the block should behave. If you would like them to be kept as newlines, use the literal style, indicated by a pipe <code>|</code>. Note that without a chomping indicator, described next, only the last newline is kept.</p> <p>PDL: <pre><code>document:\n  - |\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line,\n    plus another line at the end.\n\n\n  - \"End.\"\n</code></pre></p> <p>Output: <pre><code>Several lines of text,\nwith some \"quotes\" of various 'types',\nand also a blank line:\n\nand some text with\n    extra indentation\non the next line,\nplus another line at the end.\nEnd.\n</code></pre></p> <p>If instead you want them to be replaced by spaces, use the folded style, indicated by a right angle bracket <code>&gt;</code>. To get a newline using the folded style, leave a blank line by putting two newlines in. Lines with extra indentation are also not folded.</p> <p>PDL: <pre><code>document:\n  - &gt;\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line,\n    plus another line at the end.\n\n\n  - \"End.\"\n</code></pre></p> <p>Output: <pre><code>Several lines of text, with some \"quotes\" of various 'types', and also a blank line:\nand some text with\n    extra indentation\non the next line, plus another line at the end.\nEnd.\n</code></pre></p> <p>Block Chomping Indicator: The chomping indicator controls what should happen with newlines at the end of the string. The default, clip, puts a single newline at the end of the string. To remove all newlines, strip them by putting a minus sign <code>-</code> after the style indicator. Both clip and strip ignore how many newlines are actually at the end of the block; to keep them all put a plus sign <code>+</code> after the style indicator.</p> <p>PDL: <pre><code>document:\n  - |-\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line,\n    plus another line at the end.\n\n\n  - \"End.\"\n</code></pre></p> <p>Output: <pre><code>Several lines of text,\nwith some \"quotes\" of various 'types',\nand also a blank line:\n\nand some text with\n    extra indentation\non the next line,\nplus another line at the end.End.\n</code></pre></p> <p>PDL: <pre><code>document:\n  - |+\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line,\n    plus another line at the end.\n\n\n  - \"End.\"\n</code></pre></p> <p>Output: <pre><code>Several lines of text,\nwith some \"quotes\" of various 'types',\nand also a blank line:\n\nand some text with\n    extra indentation\non the next line,\nplus another line at the end.\n\n\nEnd.\n</code></pre></p> <p>If you don't have enough newline characters using the above methods, you can always add more like so: <pre><code>document:\n  - |-\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line,\n    plus another line at the end.\n\n\n  - \"\\n\\n\\n\\n\"\n  - \"End.\"\n</code></pre></p> <p>Output: <pre><code>Several lines of text,\nwith some \"quotes\" of various 'types',\nand also a blank line:\n\nand some text with\n    extra indentation\non the next line,\nplus another line at the end.\n\n\n\nEnd.\n</code></pre></p> <p>Indentation Indicator: Ordinarily, the number of spaces you're using to indent a block will be automatically guessed from its first line. You may need a block indentation indicator if the first line of the block starts with extra spaces. In this case, simply put the number of spaces used for indentation (between 1 and 9) at the end of the header.</p> <p>PDL: <pre><code>document:\n  - |1\n    Several lines of text,\n    with some \"quotes\" of various 'types',\n    and also a blank line:\n\n    and some text with\n        extra indentation\n    on the next line.\n</code></pre></p> <p>Output: <pre><code> Several lines of text,\n with some \"quotes\" of various 'types',\n and also a blank line:\n\n and some text with\n     extra indentation\n on the next line.\n</code></pre></p>"},{"location":"tutorial/#flow-scalars","title":"Flow Scalars","text":"<p>Single-quoted:</p> <p>PDL:</p> <pre><code>document: 'Several lines of text,\n  containing ''single quotes''. Escapes (like \\n) don''t do anything.\n\n  Newlines can be added by leaving a blank line.\n    Leading whitespace on lines is ignored.'\n</code></pre> <p>Output:</p> <pre><code>Several lines of text, containing 'single quotes'. Escapes (like \\n) don't do anything.\nNewlines can be added by leaving a blank line. Leading whitespace on lines is ignored.\n</code></pre> <p>Double-quoted:</p> <p>PDL:</p> <pre><code>document: \"Several lines of text,\n  containing \\\"double quotes\\\". Escapes (like \\\\n) work.\\nIn addition,\n  newlines can be esc\\\n  aped to prevent them from being converted to a space.\n\n  Newlines can also be added by leaving a blank line.\n    Leading whitespace on lines is ignored.\"\n</code></pre> <p>Output:</p> <pre><code>Several lines of text, containing \"double quotes\". Escapes (like \\n) work.\nIn addition, newlines can be escaped to prevent them from being converted to a space.\nNewlines can also be added by leaving a blank line. Leading whitespace on lines is ignored.\n</code></pre> <p>Plain:</p> <p>PDL:</p> <pre><code>document: Several lines of text,\n  with some \"quotes\" of various 'types'.\n  Escapes (like \\n) don't do anything.\n\n  Newlines can be added by leaving a blank line.\n    Additional leading whitespace is ignored.\n</code></pre> <p>Output:</p> <pre><code>Several lines of text, with some \"quotes\" of various 'types'. Escapes (like \\n) don't do anything.\nNewlines can be added by leaving a blank line. Additional leading whitespace is ignored.\n</code></pre>"},{"location":"tutorial/#variable-definition-and-use","title":"Variable Definition and Use","text":"<p>Any block can have a variable definition using a <code>def: &lt;var&gt;</code> field. This means that the output of that block is assigned to the variable <code>&lt;var&gt;</code>, which may be reused at a later point in the document. </p> <p>Consider the following example (file):</p> <pre><code>description: Hello world with variable def and use\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  def: GEN\n  parameters:\n    decoding_method: greedy\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n- \"\\nGEN is equal to: {{ GEN }}\"\n</code></pre> <p>Here we assign the output of the model to variable <code>GEN</code> using the <code>def</code> field. The last line of the program prints out the value of <code>GEN</code>. Notice the notation <code>{{ }}</code> for accessing the value of a variable.</p> <p>When we execute this program, we obtain: <pre><code>Hello, world!\nGEN is equal to:  world!\n</code></pre></p>"},{"location":"tutorial/#model-chaining","title":"Model Chaining","text":"<p>In PDL, we can declaratively chain models together as in the following example (file):</p> <pre><code>description: Hello world with model chainings\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  parameters:\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n- \"\\nTranslate the above sentence to French\\n\"\n- model: ibm/granite-20b-multilingual\n</code></pre> <p>In this program, the first call is to a granite model to complete the sentence <code>Hello, world!</code>. The following block in the document prints out the sentence: <code>Translate the above sentence to French</code>. The final line of the program takes the entire document produced so far and passes it as input to a falcon model. Notice that the input passed to the falcon model is the document up to that point. This makes it easy to chain models together and continue building on previous interactions.</p> <p>When we execute this program, we obtain:</p> <pre><code>Hello, world!\nTranslate the above sentence to French\nBonjour, monde!\n</code></pre>"},{"location":"tutorial/#function-definition","title":"Function Definition","text":"<p>PDL also supports function definitions to make it easier to reuse code. Suppose we want to define a translation function that takes a string and calls a falcon model for the translation. This would be written in PDL as follows (file):</p> <pre><code>description: Hello world with functions\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  def: GEN\n  parameters:\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n- def: translate\n  function:\n    sentence: str\n    language: str\n  return:\n    - \"\\nTranslate the sentence '{{ sentence }}' to {{ language }}\\n\"\n    - model: ibm/granite-20b-multilingual\n- call: translate\n  args:\n    sentence: Hello,{{ GEN }}\n    language: French\n- call: translate\n  args:\n    sentence: Bye,{{ GEN }}\n    language: Spanish\n</code></pre> <p>In this program, the third block defines a function <code>translate</code> that takes as parameters <code>sentence</code> and <code>language</code>, both of which are of type string. The body of the function is defined by its <code>return</code> field. In this case, we formulate a translation prompt using the parameters and send it to a falcon model.</p> <p>The last two blocks are calls to this function, as indicated by <code>call: translate</code>. This block specifies the arguments to be passed. When we execute this program, we obtain:</p> <pre><code>Hello, world!\nTranslate the sentence 'Hello, world!' to French\nBonjour, monde!\nTranslate the sentence 'Bye, world!' to Spanish\nAdi\u00f3s, mundo!\n</code></pre> <p>A function only contributes to the output document when it is called. So the definition itself results in <code>\"\"</code>. When we call a function, we implicitly pass the current document context, and this is used as input to model calls inside the function body. In the above example, since the <code>input</code> field is omitted, the entire document produced at that point is passed as input to the falcon model. </p>"},{"location":"tutorial/#grouping-variable-definitions-in-defs","title":"Grouping Variable Definitions in Defs","text":"<p>In PDL, the above program can be written more neatly by grouping certain variable definitions into a <code>defs</code> section, as follows (file):</p> <pre><code>description: Hello world with functions\ndefs:\n  translate:\n    function:\n      sentence: str\n      language: str\n    return:\n      - \"\\nTranslate the sentence '{{ sentence }}' to {{ language }}\\n\"\n      - model: ibm/granite-20b-multilingual\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  def: GEN\n  parameters:\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true \n- call: translate\n  args:\n    sentence: Hello,{{ GEN }}\n    language: French\n- call: translate\n  args:\n    sentence: Bye,{{ GEN }}\n    language: Spanish\n</code></pre> <p>This program has the same output has the one from the previous section.</p> <p>Notice that moving the <code>GEN</code> variable in <code>defs</code> would change the semantics of the program. This is because that model call is dependent on its context. Since it does not have an <code>input</code> field, it depends on what was produced in the document up to that point. Moving it to <code>defs</code> means that it would be executed immediately with an empty context. </p>"},{"location":"tutorial/#muting-block-output-with-show_result","title":"Muting Block Output with Show_result","text":"<p>By default, when a PDL block is executed it produces a result that gets printed in the output document. It is possible to mute this feature by setting <code>show_result</code> to <code>false</code> for any block. This feature allows the computation of intermediate values that are not necessarily output in the document. The value of the variable specified in <code>def</code> is still set to the result of the block.</p> <p>Consider the same example as above, but with <code>show_result</code> set to <code>false</code> (file):</p> <pre><code>description: Hello world with functions\ndocument:\n- Hello,\n- model: ibm/granite-20b-code-instruct-v2\n  def: GEN\n  parameters:\n    stop_sequences:\n    - '!'\n    include_stop_sequence: true\n- def: translate\n  function:\n    sentence: str\n    language: str\n  return:\n    - \"\\nTranslate the sentence '{{ sentence }}' to {{ language }}\\n\"\n    - model: ibm/granite-20b-multilingual\n- call: translate\n  show_result: false\n  def: FRENCH\n  args:\n    sentence: Hello,{{ GEN }}\n    language: French\n- call: translate\n  args:\n    sentence: Bye,{{ GEN }}\n    language: Spanish\n- \"\\nThe french sentence was: {{ FRENCH }}\"\n</code></pre> <p>The call to the translator with French as language does not produce an output. However, we save the result in variable <code>FRENCH</code> and use it in the last sentence of the document. When we execute this program, we obtain:</p> <pre><code>Hello, world!\nTranslate the sentence 'Bye, world!' to Spanish\nNos vemos, mundo!\nThe french sentence was: Bonjour, monde!\n</code></pre> <p>An important detail to be mindful of is where <code>show_result</code> is set. Here is an example of mistake that is easy to make: <pre><code>description: Test\ndocument:\n  - def: NAME\n    document:\n      - model: \"ibm/granite-20b-code-instruct-v2\"\n        show_result: false # &lt;-- MISTAKE:\n        # `show_result` is specified on the document,\n        # resulting in an _empty_ document and thus\n        # an empty `NAME`\n        platform: bam\n        input: Hello,\n        parameters:\n          decoding_method: \"greedy\"\n          stop_sequences:\n            - \"!\"\n          include_stop_sequence: false\n  - \"The variable will be empty: `\"\n  - get: NAME\n  - \"`!\\n\"\n  - def: TWO\n    show_result: false # &lt;-- CORRECT:\n    # `show_result` is set at the root of the block,\n    # which behaves as expected.\n    document:\n      - model: \"ibm/granite-20b-code-instruct-v2\"\n        platform: bam\n        input: Hello,\n        parameters:\n          decoding_method: \"greedy\"\n          stop_sequences:\n            - \"!\"\n          include_stop_sequence: false\n  - \"But not this one: `\"\n  - get: TWO\n  - \"`!\\n\"\n</code></pre></p> <p>The output is: <pre><code>The variable will be empty: ``!\nBut not this one: ` world`!\n</code></pre></p>"},{"location":"tutorial/#input-from-file-or-stdin","title":"Input from File or Stdin","text":"<p>PDL can accept textual input from a file or stdin. In the following example (file), the contents of this file are read by PDL and incorporated in the document. The result is also assigned to a variable <code>HELLO</code>.</p> <pre><code>description: PDL code with input block\ndocument:\n- read: examples/input/data.txt\n  def: HELLO\n</code></pre> <p>In the next example, prompts are obtained from stdin (file). This is indicated by assigning the value <code>null</code> to the <code>read</code> field.</p> <pre><code>description: PDL code with input block\ndocument:\n- \"The following will prompt the user on stdin.\\n\"\n- read:\n  message: \"Please provide an input: \"\n  def: STDIN\n</code></pre> <p>Notice that when executing programs containing input blocks, the stdin input is obtained first and then the entire document is printed when produced. The document is not printed as it gets produced since there may be portions that are intermediate results and must be hidden (see <code>show_result</code> feature above). If the <code>message</code> field is omitted then one is provided for you.</p> <p>The following example shows a multiline stdin input (file). When executing this code and to exit from the multiline input simply press control D (macos). <pre><code>description: PDL code with input block\ndocument:\n- \"A multiline stdin input.\\n\"\n- read:\n  multiline: true\n</code></pre></p> <p>Finally, the following example shows reading content in JSON format. In this case the block's <code>assign</code> field must be defined since the block adds the JSON content in that format to the scope, assigning this content to the named variable.</p> <p>Consider the JSON content in this file: <pre><code>{\n    \"name\": \"Bob\",\n    \"address\": {\n        \"number\": 87,\n        \"street\": \"Smith Road\",\n        \"town\": \"Armonk\", \n        \"state\": \"NY\",\n        \"zip\": 10504\n    }\n}\n</code></pre></p> <p>The following PDL program reads this content and assigns it to variable <code>PERSON</code> in JSON format (file). The reference <code>PERSON.address.street</code> then refers to that field inside the JSON object.</p> <pre><code>description: Input block example with json input\ndocument:\n- read: examples/tutorial/input.json\n  parser: json\n  def: PERSON\n  show_result: false\n- \"{{ PERSON.name }} lives at the following address:\\n\"\n- \"{{ PERSON.address.number }} {{ PERSON.address.street }} in the town of {{ PERSON.address.town }}, {{ PERSON.address.state }}\"\n</code></pre> <p>When we execute this program, we obtain: <pre><code>Bob lives at the following address:\n87 Smith Road in the town of Armonk, NY\n</code></pre></p>"},{"location":"tutorial/#calling-code","title":"Calling code","text":"<p>The following script shows how to execute python code (file). Currently, the python code is executed locally. In the future, we plan to use a serverless cloud engine to execute snippets of code. So in principle, PDL is agnostic of any specific programming language. Variables defined in PDL are copied into the global scope of the Python code, as such, mutating variables in Python has no effect on the variables in the document. The result of the code must be assigned to the variable <code>result</code> internally to be propagated to the result of the block.</p> <pre><code>description: Hello world showing call to python code\ndocument:\n- \"Hello, \"\n- lan: python\n  code: \n    |\n    import random\n    import string\n    result = random.choice(string.ascii_lowercase)\n</code></pre> <p>This results in the following output: <pre><code>Hello, r!\n</code></pre></p>"},{"location":"tutorial/#calling-apis","title":"Calling APIs","text":"<p>PDL programs can contain calls to REST APIs. Consider a simple weather app (file):</p> <pre><code>description: Using a weather API and LLM to make a small weather app\ndocument:\n- read:\n  def: QUERY\n  message: \"Ask a query: \"\n  show_result: false\n- model: ibm/granite-20b-code-instruct-v2\n  input:\n    document: |-\n      Question: What is the weather in London?\n      London\n      Question: What's the weather in Paris?\n      Paris\n      Question: Tell me the weather in Lagos?\n      Lagos\n      Question: {{ QUERY }}\n  parameters:\n    decoding_method: greedy\n    stop_sequences:\n    - Question\n    - What\n    - '!'\n    include_stop_sequence: false\n  def: LOCATION\n  show_result: false\n- api: https\n  url: https://api.weatherapi.com/v1/current.json?key=cf601276764642cb96224947230712&amp;q=\n  input: '{{ LOCATION }}'\n  def: WEATHER\n  show_result: false\n- model: ibm/granite-20b-code-instruct-v2\n  input: &gt;\n    Explain what the weather is from the following JSON:\n    `{{ WEATHER }}`\n  parameters:\n    decoding_method: greedy\n    max_new_tokens: 100\n    stop_sequences:\n    - What\n    - '!'\n    include_stop_sequence: false\n</code></pre> <p>In this program, we first prompt the user to enter a query about the weather in some location (assigned to variable <code>QUERY</code>). The next block is a call to a granite model with few-shot examples to extract the location, which we assign to variable <code>LOCATION</code>. The next block makes an API block. Currently we only support simple <code>GET</code> calls as shown above, but will improve this interface in the future. Here the <code>LOCATION</code> is appended to the <code>url</code>. The result is a JSON object, which may be hard to interpret for a human user. So we make a final call to an LLM to interpret the JSON in terms of weather. Notice how many blocks have <code>show_result</code> set to <code>false</code> to hide intermediate results.</p> <p>Here is an example of interaction with this program: <pre><code>Ask a query: What is the weather in Anchorage?\n\nAnswer: The weather in Anchorage, Alaska, United States of America is currently overcast with a temperature of -2.8\u00b0C (-5.0\u00b0F). The wind speed is 4.3 mph (6.8 kph) and the humidity is 66%.\n</code></pre></p>"},{"location":"tutorial/#data-block","title":"Data Block","text":"<p>PDL offers the ability to create JSON data as illustrated by the following example (described in detail in the Overview section). The <code>data</code> block can gather previously defined variables into a JSON structure. This feature is useful for data generation. Programs such as this one can be bootstrapped with a bash or Python script to generate data en masse. (file)</p> <pre><code>description: Code explanation example\ndocument:\n- read: examples/code/data.json\n  parser: json\n  def: CODE\n  show_result: False\n- read: examples/code/ground_truth.txt\n  def: TRUTH\n  show_result: False\n- model: ibm/granite-20b-code-instruct-v2\n  def: EXPLANATION\n  show_result: False\n  parameters:\n    decoding_method: greedy\n    max_new_tokens: 1024\n  input:\n     |\n      Here is some info about the location of the function in the repo.\n      repo: \n      {{ CODE.repo_info.repo }}\n      path: {{ CODE.repo_info.path }}\n      Function_name: {{ CODE.repo_info.function_name }}\n\n\n      Explain the following code:\n      ```\n      {{ CODE.source_code }}```\n- def: EVAL\n  show_result: False\n  lan: python\n  code:\n    |\n    import textdistance\n    expl = \"\"\"\n    {{ EXPLANATION }}\n    \"\"\"\n    truth = \"\"\"\n    {{ TRUTH }}\n    \"\"\"\n    result = textdistance.levenshtein.normalized_similarity(expl, truth)\n- data:\n    input: \"{{ CODE }}\"\n    output: \"{{ EXPLANATION }}\"\n    metric: \"{{ EVAL }}\"\n</code></pre>"},{"location":"tutorial/#include-block","title":"Include Block","text":"<p>PDL allows programs to be defined over multiple files. The <code>include</code> block allows one file to incorporate another, as shown in the following example:</p> <pre><code>description: Business Rules extraction from Jsp pages\ndefs:\n  PROMPTS2: \n    | \n    Convert above provided JSP code into business rules. Response should be in plain English and should not include any code. Do not output anything other than response. Please extract and summarize all the business rules in the below 5 categories:\n      -Data Retrieval\n      -User Interface\n      -Results Display\n      -JavaScript\n  PROMPTS2_NOTES:\n  - |\n\n    * Strictly include all relevant parameters related to each of the above categories\n\ndocument:\n  - include: examples/consultant/function.pdl\n  - call: template\n    args:\n      preamble: \"jsp: {{ input_data }}\"\n      question: \"{{ PROMPTS2 }}\"\n      notes: \"{{ PROMPTS2_NOTES }}\"\n</code></pre> <p>which includes the following file:</p> <pre><code>description: Function definition\ndefs:\n  template:\n    function:\n      preamble: str\n      question: str\n      notes: str\n    return:\n    - |\n      {{ preamble }}\n      ### Question: {{ question }}\n\n      ### Notes:\n      {{ notes }}\n\n      ### Answer: \ndocument: \"\"\n</code></pre> <p>The <code>include</code> block means that the PDL code at that file is executed and its output is included at the point where the <code>include</code> block appears in a document. In this example, the file contains a function definition, which is used in the first program as a template. This feature allows reuse of common templates and patterns and to build libraries.</p>"},{"location":"tutorial/#conditionals-and-loops","title":"Conditionals and Loops","text":"<p>PDL supports conditionals and loops as illustrated in the followin example (file).</p> <p>The task at hand is to generate math problems that look like the following:</p> <pre><code>Question: Noah charges $60 for a large painting and $30 for a small painting.\nLast month he sold eight large paintings and four small paintings.\nIf he sold twice as much this month, how much is his sales for this month?\n\nAnswer: Let's think step by step.\nHe sold 8 large paintings and 4 small paintings last month.\nHe sold twice as many this month.\n8 large paintings x $60 = &lt;&lt; 8*60= 480 &gt;&gt; 480\n4 small paintings x $30 = &lt;&lt; 4*30= 120 &gt;&gt; 120\nSo he sold &lt;&lt; 480+120= 600 &gt;&gt; 600 paintings last month.\nTherefore he sold &lt;&lt; 600*2= 1200 &gt;&gt; this month.\nThe answer is $1200.\n</code></pre> <p>We want the LLM to generate a math problem after <code>Question</code>, then generate an <code>Answer</code> with step-by-step reasoning. In the answer there may be arithmetic expressions. As we know that LLMs sometimes make mistakes with arithmentic, we wish to use Python to computer all arithmetic expressions in the answer. In the example above, generation should stop at <code>&lt;&lt;</code> symbols, then generate an arithmetic expression, followed by an <code>=</code> sign. At that point, we want to switch to Python and compute the expression as code, print the result and continue generation. This process should repeat until the model generates the phrase <code>The answer is</code>.</p> <p>The following PDL program captures this task:</p> <pre><code>description: Arithmetic Expressions\ndocument:\n- read: examples/arith/example1.txt\n- read: examples/arith/example2.txt\n- repeat:\n  - \"\\nQuestion: \"\n  - def: QUESTION\n    model: ibm/granite-20b-code-instruct-v2\n    parameters:\n      stop_sequences:\n      - Answer\n      include_stop_sequence: false\n  - \"Answer: Let's think step by step.\\n\"\n  - repeat:\n    - def: REASON_OR_CALC\n      model: ibm/granite-20b-code-instruct-v2\n      parameters:\n        stop_sequences:\n        - '&lt;&lt;'\n        include_stop_sequence: true\n    - if: '{{ REASON_OR_CALC.endswith(\"&lt;&lt;\") }}'\n      then:\n      - def: EXPR\n        model: ibm/granite-20b-code-instruct-v2\n        parameters:\n          stop_sequences:\n          - '='\n          - \"\\n\"\n          include_stop_sequence: false\n      - '= '\n      - def: RESULT\n        lan: python\n        code:\n        - result = {{ EXPR }}\n      - ' &gt;&gt;'\n    until: '{{ \"The answer is\" in REASON_OR_CALC }}'\n\n  - \"\\n\\n\"\n  num_iterations: 3\n</code></pre> <p>The first two blocks read math problem examples and include them in the document. These will be our few-shot examples. The next block is a repetion as indicated by the fields: <code>repeat</code> and the accompanying <code>num_iterations</code>. The field <code>repeat</code> can contain any document (string or block or list of strings and blocks), the <code>num_iterations</code> indicates how many times to repeat.</p> <p>In the body of the <code>repeat</code> block, the program first asks granite to generate a question and add it to the document. Next we print <code>Answer: Let's think step by step.\\n</code>. The following block is a repeat-until: the document in <code>repeat</code> is repeated until the condition in the <code>until</code> field becomes true. Here the condition states that we stop the iteration when variable <code>REASON_OR_CALC</code> contains <code>&lt;&lt;</code>. That variable is defined in the first block of the repeat-until -- we prompt a granite model and stop at the character <code>&lt;&lt;</code>.</p> <p>The next block is an if-then-else. We check if <code>REASON_OR_CALC</code> ends with <code>&lt;&lt;</code> and if so we prepare for the python call to perform the arithmetic calculation. First, we have the granite model generate an <code>EXPR</code> variable, which we then use inside the <code>code</code> of the following Python block. </p> <p>When we execute this program, we obtain 3 math problems like the ones in the examples. Try it! </p>"},{"location":"tutorial/#for-loops","title":"For Loops","text":"<p>PDL also offers <code>for</code> loops over lists. The following example simply prints each value in the list followed by a newline:</p> <pre><code>description: for loop\ndocument:\n- for:\n    i: [1, 2, 3, 4]\n  repeat: \n    \"{{ i }}\\n\"\n</code></pre> <p>The <code>for</code> loop constructs also allows iterating over 2 or more lists of the same length simultaneously:</p> <pre><code>description: for loop\ndefs:\n  numbers: {\n    data: [1, 2, 3, 4]\n  }\n  names: {\n    data: [\"Bob\", \"Carol\", \"David\", \"Ernest\"]\n  }\n\ndocument:\n- for:\n    number: \"{{ numbers }}\"\n    name: \"{{ names }}\"\n  repeat:\n    \"{{ name }}'s number is {{ number }}\\n\"\n</code></pre> <p>This results in the following output:</p> <pre><code>Bob's number is 1\nCarol's number is 2\nDavid's number is 3\nErnest's number is 4\n</code></pre>"},{"location":"tutorial/#type-checking","title":"Type Checking","text":"<p>Consider the following PDL program (file). It first reads the data found here to form few-shot examples. These demonstrations show how to create some JSON data.</p> <pre><code>description: Creating JSON Data\ndefs:\n  data:\n    read: examples/demo/data.pdl\n    parser: yaml\n    spec: { questions: [str], answers: [obj] }\ndocument:\n  model: ibm/granite-20b-code-instruct-v2\n  def: model_output\n  spec: {name: str, age: int}\n  input: \n    - for: \n        question: \"{{ data.questions }}\"\n        answer: \"{{ data.answers }}\"\n      repeat:\n        - |\n          {{ question }}\n          {{ answer }}\n    - &gt; \n      Question: Create a JSON object with fields 'name' and 'age' \n      and set them appropriately. Write the age in letters.\n  parser: yaml\n  parameters:\n    decoding_method: greedy\n    stop_sequences:\n    - '}'\n    include_stop_sequence: true\n</code></pre> <p>Upon reading the data we use a parser to parse it into a YAML. The <code>spec</code> field indicates the expected type for the data, which is an object with 2 fields: <code>questions</code> and <code>answers</code> that are a list of string and a list of objects,  respectively. When the interpreter is executed, it checks this type dynamically and throws errors if necessary.</p> <p>Similarly, the output of the model call is parsed as YAML, and the <code>spec</code> indicates that we expect an object with 2 fields: <code>name</code> of type string, and <code>age</code> of type integer.</p> <p>When we run this program, we obtain the output: <pre><code>{\"name\": \"John\", \"age\": \"thirty-two\"}\nexamples/demo/1-gen-data.pdl:7 - Type errors during spec checking\nexamples/demo/1-gen-data.pdl:7 - thirty-two should be of type &lt;class 'int'&gt;\n</code></pre></p> <p>Notice that since we asked the age to be produced in letters, this causes a type error indicated above. If we modify the prompt not to contain this directive, the type error goes away.</p> <p>In general, <code>spec</code> definitions can be a subset of JSON schema, or use a shorthand notation as illustrated by the examples below:</p> <ul> <li><code>bool</code>: boolean</li> <li><code>str</code>: string</li> <li><code>int</code>: integer</li> <li><code>float</code>: float</li> <li><code>{str: {pattern: '^[A-Za-z][A-Za-z0-9_]*$'}}</code>: a string satisfying the indicated pattern</li> <li><code>{float: {minimum: 0, exclusiveMaximum: 1}}</code>: a float satisfying the indicated constraints</li> <li><code>{list: int}</code>: a list of integers</li> <li><code>[int]</code>: a list of integers</li> <li><code>{list: {int: {minimum: 0}}}</code>: a list of integers satisfying the indicated constraints</li> <li><code>[{int: {minimum: 0}}]</code>: same as above</li> <li><code>{list: {minItems: 1, int: {}}}</code>, a list satisfying the indicated constraints</li> <li><code>{obj: {latitude: float, longitude: float}}</code>: an ibject with fields <code>latitude</code> and <code>longitude</code></li> <li><code>{latitude: float, longitude: float}</code>: same as above</li> <li><code>{obj: {question: str, answer: str, context: {optional: str}}}</code>: an object with an optional field</li> <li><code>{question: str, answer: str, context: {optional: str}}</code>: same as above</li> <li><code>{list: {obj: {question: str, answer: str}}}</code>: a list of objects</li> <li><code>[{question: str, answer: str}]</code>: same as above</li> <li><code>{enum: [red, green, blue]}</code>: an enumeration</li> </ul>"},{"location":"tutorial/#debugging-pdl-programs","title":"Debugging PDL Programs","text":"<p>We highly recommend to use VSCode to edit PDL YAML files. This project has been configured so that every YAML file is associated with the PDL grammar JSONSchema (see settings and schema). This enables the editor to display error messages when the yaml deviates from the PDL syntax and grammar. It also provides code completion. You can set up your own VSCode PDL projects similarly using this settings and schema files. The PDL interpreter also provides similar error messages.</p> <p>The interpreter prints out a log by default in the file <code>log.txt</code>. This log contains the details of inputs and outputs to every block in the program. It is useful to examine this file when the program is behaving differently than expected.</p> <p>To change the log filename, you can pass it to the interpreter as follows:</p> <pre><code>python3 -m pdl.pdl --log &lt;my-logfile&gt; &lt;my-example&gt;\n</code></pre>"},{"location":"tutorial/#prompt-library-react-rewoo-cot-pot","title":"Prompt Library: ReAct, ReWOO, CoT, PoT","text":"<p>Some of the most common prompt patterns/techniques have been implemented as PDL functions. A demo of the ReAct template:</p>"},{"location":"tutorial/#chain-of-thought-wei-et-al-2022","title":"Chain of Thought (Wei et al., 2022)","text":"<p>The most simple pattern is CoT (Chain of Thought). An example for arithmetic reasoning:</p> <pre><code>document:\n  - include: examples/prompt_library/CoT.pdl\n  - call: fewshot_cot\n    args:\n      examples:\n        - question: |-\n            Noah charges $60 for a large painting and $30 for a small painting.\n            Last month he sold eight large paintings and four small paintings.\n            If he sold twice as much this month, how much is his sales for this month?\n          reasoning: |-\n            He sold 8 large paintings and 4 small paintings last month.\n            He sold twice as many this month.\n            8 large paintings x $60 = &lt;&lt; 8*60= 480 &gt;&gt; 480\n            4 small paintings x $30 = &lt;&lt; 4*30= 120 &gt;&gt; 120\n            So he sold &lt;&lt; 480+120= 600 &gt;&gt; 600 paintings last month.\n            Therefore he sold &lt;&lt; 600*2= 1200 &gt;&gt; this month.\n          answer: $1200\n        - question: |-\n            Noah charges $30 for a large vases and $10 for a small vases.\n            Last month he sold five large vases and three small vases.\n            If he sold three times as much this month, how much is his sales for this month?\n          reasoning: |-\n            He sold 5 large vases and 3 small vases last month.\n            He sold three times as many this month.\n            5 large vases x $30 = &lt;&lt; 5*30= 150 &gt;&gt; 150\n            3 small vases x $10 = &lt;&lt; 3*10= 30 &gt;&gt; 30\n            So he sold &lt;&lt; 150+30= 180 &gt;&gt; 180 vases last month.\n            Therefore he sold &lt;&lt; 180*3= 540 &gt;&gt; this month.\n          answer: $540\n  - |-\n      Question: Bobby gave Alice 5 apples. Alice has 6 apples. How many apples did she have before?\n\n      Answer: Let's think step by step. \n  - model: \"ibm/granite-34b-code-instruct\"\n    platform: bam\n</code></pre> <p>This simple template constructs fewshot examples, which should be followed by the query/question and a model call. The output up to the model call (and thus the input to the model) would look as follows: <pre><code>Question: Noah charges $60 for a large painting and $30 for a small painting.\nLast month he sold eight large paintings and four small paintings.\nIf he sold twice as much this month, how much is his sales for this month?\n\nAnswer: Let's think step by step. He sold 8 large paintings and 4 small paintings last month.\nHe sold twice as many this month.\n8 large paintings x $60 = &lt;&lt; 8*60= 480 &gt;&gt; 480\n4 small paintings x $30 = &lt;&lt; 4*30= 120 &gt;&gt; 120\nSo he sold &lt;&lt; 480+120= 600 &gt;&gt; 600 paintings last month.\nTherefore he sold &lt;&lt; 600*2= 1200 &gt;&gt; this month.\nThe answer is $1200.\n\nQuestion: Noah charges $30 for a large vases and $10 for a small vases.\nLast month he sold five large vases and three small vases.\nIf he sold three times as much this month, how much is his sales for this month?\n\nAnswer: Let's think step by step. He sold 5 large vases and 3 small vases last month.\nHe sold three times as many this month.\n5 large vases x $30 = &lt;&lt; 5*30= 150 &gt;&gt; 150\n3 small vases x $10 = &lt;&lt; 3*10= 30 &gt;&gt; 30\nSo he sold &lt;&lt; 150+30= 180 &gt;&gt; 180 vases last month.\nTherefore he sold &lt;&lt; 180*3= 540 &gt;&gt; this month.\nThe answer is $540.\n\nQuestion: Bobby gave Alice 5 apples. Alice has 6 apples. How many apples did she have before?\n\nAnswer: Let's think step by step.\n</code></pre></p>"},{"location":"tutorial/#program-of-thought-chen-2022","title":"Program of Thought (Chen, 2022)","text":"<p>The PoT (Program of Thought) template includes the static fewshot prompt from (Chen, 2022). Essentially, the model is prompted to generate Python code to solve its problem, which is then executed.</p> <pre><code>document:\n  - include: examples/prompt_library/PoT.pdl\n  - def: ANSWER\n    call: program_of_thought\n    args:\n      question: Ketty saves 20000 dollars to the bank. After three years, the sum with compound interest rate is 1000 dollars more than the sum with simple interest rate. What is the interest rate of the bank?\n      model: ibm/granite-34b-code-instruct\n  - \"\\nAnswer: {{ ANSWER }}\"\n</code></pre>"},{"location":"tutorial/#react-yao-2023","title":"ReAct (Yao, 2023)","text":"<p>The ReAct agent pattern is essentially a question, followed by a series of thoughts, actions, and observations, collectively called the trajectory. The input question is usually followed by a thought like <code>I need to search for x</code>. This is then followed by an action <code>Search[x]</code>, and the output of this tool cool is the observation. Finally, the agent ends the trajectory with the <code>Finish[answer]</code> action.</p> <p>This pattern is provided by <code>examples/prompt_library/ReAct.pdl</code>. It describes the tools, renders their examples, renders any user provided trajectories (e.g., multiple tool use), and handles the core loop until <code>Finish</code> is reached.</p> <p>The first building block is the <code>react_block</code> function. This function renders a trajectory, which consist of a list of single-item maps, into text. For example:</p> <pre><code>document:\n  - include: examples/prompt_library/ReAct.pdl\n  - call: react_block\n    args:\n      trajectory:\n        - question: \"What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\"\n        - thought: \"I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...\"\n        - action: \"Search[Colorado orogeny]\"\n        - observation: \"The Colorado orogeny was an episode of mountain building (an orogeny) ...\"\n        - thought: \"High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.\"\n        - action: \"Finish[1,800 to 7,000 ft]\"\n</code></pre> <p>Renders to: <pre><code>Question: What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\nTho: I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...\nAct: Search[Colorado orogeny]\nObs: The Colorado orogeny was an episode of mountain building (an orogeny) ...\nTho: High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.\nAct: Finish[1,800 to 7,000 ft]\n</code></pre></p> <p>To initiate a ReAct agent, the <code>react</code> function is used. For example: <pre><code>document:\n  - include: examples/prompt_library/ReAct.pdl\n  - call: react\n    args:\n     question: \"When did the Battle of White Plains take place?\"\n     model: meta-llama/llama-3-70b-instruct\n     tools: \"{{ default_tools }}\"\n     trajectories: []\n</code></pre></p> <p>The output of the <code>react</code> function is currently a JSON object with one key, <code>answer</code>, containing the final (<code>Finish[..]</code>) answer.</p> <p>The <code>default_tools</code> variable is provided by the ReAct include. Critically, it currently only offers <code>Search</code> and <code>get_current_weather</code>. In most cases, one will want to define their own tools. Tools and their metadata must be defined, as the <code>react</code> function uses this information to describe tools to the model, and to execute model tool usage, if the action is included in the list of tool metadata. Tools are defined as follows: <pre><code>Search:\n  function:\n    subject: str\n  return:\n    - \"[Document]\\n\"\n    - lan: python\n      code: |\n        import wikipedia\n        try:\n          result = wikipedia.summary(subject)\n        except wikipedia.WikipediaException as e:\n          result = str(e)\n    - \"[End]\\n\"\n\ndefault_tools:\n  data:\n    - name: Search\n      description: Search Wikipedia for a summary\n      parameters:\n        - name: query\n          type: string\n          description: The topic of interest\n      examples:\n        - - question: \"What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\"\n          - thought: \"I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...\"\n          - action: \"Search[Colorado orogeny]\"\n          - observation: \"The Colorado orogeny was an episode of mountain building (an orogeny) ...\"\n          - thought: \"High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.\"\n          - action: \"Finish[1,800 to 7,000 ft]\"\n</code></pre></p> <p>The tool <code>name</code> is the most important, as this must exactly match a defined PDL function. In this example, <code>Search</code> is defined right above the tool (metadata) definition. Note that all PDL tool functions in this template accept one parameter only, a string, which must be split by your function, if multiple parameters are expected. Next, the tool must be described, and its parameters defined. This is used to describe expected input(s) to the model. The parameters are a list, and include types and a description. Finally, a list of example trajectories should be defined to show the model how to use the tool. These trajectories follow the <code>react_block</code> pattern described above.</p> <p>Finally, you can also add your own trajectories, for example to demonstrate use of multiple tools in one trajectory: <pre><code>document:\n  - include: examples/prompt_library/ReAct.pdl\n  - call: react\n    args:\n     question: \"When did the Battle of White Plains take place?\"\n     model: meta-llama/llama-3-70b-instruct\n     tools: \"{{ default_tools }}\"\n     trajectories:\n      - - question: \"What is the minimum elevation for the area that the eastern sector of the Colorado orogeny extends into, in meters?\"\n          - thought: \"I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...\"\n          - action: \"Search[Colorado orogeny]\"\n          - observation: \"The Colorado orogeny was an episode of mountain building (an orogeny) ...\"\n          - thought: \"High Plains rise in elevation from around 1,800 to 7,000 ft, I need to convert this to meters.\"\n          - action: \"Calculator[1,800*0.3048]\"\n          - observation: \"548.64\"\n          - thought: \"The answer is 548.64 meters\"\n          - action: \"Finish[548.64]\"\n</code></pre></p>"},{"location":"tutorial/#rewoo-xu-2023","title":"ReWOO (Xu, 2023)","text":"<p>ReWOO (Reasoning without observation) is very similar to ReAct, but is faster and uses less tokens by having the model generate a trajectory where tool use can be composed by variable reference. In practice, this means the model generates a trajectory in one generation, the PDL program parses this plan and executes tools as needed, and provides all the evidence (tool output) to the model in one request. This is in contrast to ReAct, where each step results in a whole new request to the model API.</p> <p>The ReWOO function shares many similarities to the ReAct function described above. An example with a trajectory showing multiple tool use (note that these tools are not all actually defined):</p> <pre><code>document:\n  - include: examples/prompt_library/ReWOO.pdl\n  - call: rewoo\n    args:\n      task: \"When did the Battle of White Plains take place?\"\n      model: ibm/granite-34b-code-instruct\n      tools: \"{{ default_tools }}\"\n      trajectories:\n        - - question: Thomas, Toby, and Rebecca worked a total of 157 hours in one week. Thomas worked x hours. Toby worked 10 hours less than twice what Thomas worked, and Rebecca worked 8 hours less than Toby. How many hours did Rebecca work?\n          - thought: Given Thomas worked x hours, translate the problem into algebraic expressions and solve with Wolfram Alpha.\n          - action: WolframAlpha[Solve x + (2x - 10) + ((2x - 10) - 8) = 157]\n          - thought: Find out the number of hours Thomas worked.\n          - action: \"LLM[What is x, given #E1]\"\n          - thought: Calculate the number of hours Rebecca worked.\n          - action: \"Calculator[(2 * #E2 - 10) - 8]\"\n      show_plans: true\n</code></pre> <p>The tool definitions are the same as for ReAct, and so are the trajectories. However, one difference is <code>show_plans</code>, which renders the parsed plans (e.g., the function calls), mostly as a debugging feature.</p>"},{"location":"tutorial/#calling-pdl-programmatically-from-python","title":"Calling PDL Programmatically from Python","text":"<p>Consider the following PDL program, written as Python object:</p> <pre><code>hello = {\n    \"description\": \"Hello world!\",\n    \"document\": [\"Hello, world!\\n\", \"This is your first prompt descriptor!\\n\"],\n}\n</code></pre> <p>The following Python code can be used to call the interpreter programmatically:</p> <pre><code>state = InterpreterState()\ndata = Program.model_validate(hello)\nresult, document, _, _ = process_prog(state, empty_scope, data)\n</code></pre> <p>where <code>result</code> is a JSON object, and <code>document</code> is a string, both corresponding to the result of the program.</p>"},{"location":"viewer/","title":"PDL Live Viewer","text":"<p>Note</p> <p>This is a demo of the PDL live viewer with a preloaded example. In practice, the user supplies a JSON trace generated by the PDL interpreter. The left pane contains the final \"document\", and upon interaction, the right pane displays the PDL that created that part of the document, along with a breakdown of the PDL blocks on the left pane. This tool makes debugging &amp; iterating PDL programs faster &amp; easier.</p> <p></p>"}]}
